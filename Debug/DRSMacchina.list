
DRSMacchina.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000598c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08005b1c  08005b1c  00015b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c90  08005c90  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005c90  08005c90  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c90  08005c90  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c90  08005c90  00015c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c94  08005c94  00015c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005c98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000074  08005d0c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08005d0c  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eaf6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f25  00000000  00000000  0002eb9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00030ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  00031878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b724  00000000  00000000  00032578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa2b  00000000  00000000  0004dc9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9f79  00000000  00000000  0005d6c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107640  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e3c  00000000  00000000  00107694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b04 	.word	0x08005b04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005b04 	.word	0x08005b04

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000286:	f000 fd01 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800028a:	f000 f85f 	bl	800034c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028e:	f000 fa07 	bl	80006a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000292:	f000 f9d5 	bl	8000640 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000296:	f000 f979 	bl	800058c <MX_TIM2_Init>
  MX_ADC1_Init();
 800029a:	f000 f8b3 	bl	8000404 <MX_ADC1_Init>
  MX_TIM1_Init();
 800029e:	f000 f921 	bl	80004e4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80002a2:	2100      	movs	r1, #0
 80002a4:	4823      	ldr	r0, [pc, #140]	; (8000334 <main+0xb4>)
 80002a6:	f003 fb47 	bl	8003938 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 80002aa:	4823      	ldr	r0, [pc, #140]	; (8000338 <main+0xb8>)
 80002ac:	f000 ff0a 	bl	80010c4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002b0:	f04f 31ff 	mov.w	r1, #4294967295
 80002b4:	4820      	ldr	r0, [pc, #128]	; (8000338 <main+0xb8>)
 80002b6:	f000 ffbb 	bl	8001230 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 80002ba:	481f      	ldr	r0, [pc, #124]	; (8000338 <main+0xb8>)
 80002bc:	f001 f87e 	bl	80013bc <HAL_ADC_GetValue>
 80002c0:	4603      	mov	r3, r0
 80002c2:	81fb      	strh	r3, [r7, #14]
	  sprintf(msg, "%hu\r\n", raw);
 80002c4:	89fa      	ldrh	r2, [r7, #14]
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	491c      	ldr	r1, [pc, #112]	; (800033c <main+0xbc>)
 80002ca:	4618      	mov	r0, r3
 80002cc:	f004 ff5e 	bl	800518c <siprintf>
	  potVal = atoi(msg);
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	4618      	mov	r0, r3
 80002d4:	f004 ff23 	bl	800511e <atoi>
 80002d8:	4603      	mov	r3, r0
 80002da:	4a19      	ldr	r2, [pc, #100]	; (8000340 <main+0xc0>)
 80002dc:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4618      	mov	r0, r3
 80002e2:	f7ff ff75 	bl	80001d0 <strlen>
 80002e6:	4603      	mov	r3, r0
 80002e8:	b29a      	uxth	r2, r3
 80002ea:	1d39      	adds	r1, r7, #4
 80002ec:	f04f 33ff 	mov.w	r3, #4294967295
 80002f0:	4814      	ldr	r0, [pc, #80]	; (8000344 <main+0xc4>)
 80002f2:	f004 fbe3 	bl	8004abc <HAL_UART_Transmit>
	  if (potVal > 100 || (potVal > 100 && drs_flag)) {
 80002f6:	4b12      	ldr	r3, [pc, #72]	; (8000340 <main+0xc0>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	2b64      	cmp	r3, #100	; 0x64
 80002fc:	dc07      	bgt.n	800030e <main+0x8e>
 80002fe:	4b10      	ldr	r3, [pc, #64]	; (8000340 <main+0xc0>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2b64      	cmp	r3, #100	; 0x64
 8000304:	dd0c      	ble.n	8000320 <main+0xa0>
 8000306:	4b10      	ldr	r3, [pc, #64]	; (8000348 <main+0xc8>)
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d008      	beq.n	8000320 <main+0xa0>
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800030e:	2201      	movs	r2, #1
 8000310:	2120      	movs	r1, #32
 8000312:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000316:	f001 ff41 	bl	800219c <HAL_GPIO_WritePin>
		  closeDRS();
 800031a:	f000 fa9b 	bl	8000854 <closeDRS>
	  if (potVal > 100 || (potVal > 100 && drs_flag)) {
 800031e:	e005      	b.n	800032c <main+0xac>
	  } else {
		  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8000320:	2200      	movs	r2, #0
 8000322:	2120      	movs	r1, #32
 8000324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000328:	f001 ff38 	bl	800219c <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(100);
 800032c:	2064      	movs	r0, #100	; 0x64
 800032e:	f000 fd13 	bl	8000d58 <HAL_Delay>
  {
 8000332:	e7ba      	b.n	80002aa <main+0x2a>
 8000334:	20000140 	.word	0x20000140
 8000338:	200000a4 	.word	0x200000a4
 800033c:	08005b1c 	.word	0x08005b1c
 8000340:	200000a0 	.word	0x200000a0
 8000344:	2000018c 	.word	0x2000018c
 8000348:	20000090 	.word	0x20000090

0800034c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b096      	sub	sp, #88	; 0x58
 8000350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000352:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000356:	2228      	movs	r2, #40	; 0x28
 8000358:	2100      	movs	r1, #0
 800035a:	4618      	mov	r0, r3
 800035c:	f004 ff0e 	bl	800517c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000360:	f107 031c 	add.w	r3, r7, #28
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
 800036c:	60da      	str	r2, [r3, #12]
 800036e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]
 800037c:	611a      	str	r2, [r3, #16]
 800037e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000380:	2302      	movs	r3, #2
 8000382:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000384:	2301      	movs	r3, #1
 8000386:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000388:	2310      	movs	r3, #16
 800038a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800038c:	2302      	movs	r3, #2
 800038e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000390:	2300      	movs	r3, #0
 8000392:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000394:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000398:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800039a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 ff2c 	bl	80021fc <HAL_RCC_OscConfig>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <SystemClock_Config+0x62>
  {
    Error_Handler();
 80003aa:	f000 fa69 	bl	8000880 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ae:	230f      	movs	r3, #15
 80003b0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003b2:	2300      	movs	r3, #0
 80003b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80003ba:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80003be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003c4:	f107 031c 	add.w	r3, r7, #28
 80003c8:	2100      	movs	r1, #0
 80003ca:	4618      	mov	r0, r3
 80003cc:	f002 fe1e 	bl	800300c <HAL_RCC_ClockConfig>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80003d6:	f000 fa53 	bl	8000880 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 80003da:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 80003de:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003e4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003ea:	1d3b      	adds	r3, r7, #4
 80003ec:	4618      	mov	r0, r3
 80003ee:	f003 f843 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80003f8:	f000 fa42 	bl	8000880 <Error_Handler>
  }
}
 80003fc:	bf00      	nop
 80003fe:	3758      	adds	r7, #88	; 0x58
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}

08000404 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08a      	sub	sp, #40	; 0x28
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800040a:	f107 031c 	add.w	r3, r7, #28
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]
 8000424:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000426:	4b2e      	ldr	r3, [pc, #184]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000428:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800042c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800042e:	4b2c      	ldr	r3, [pc, #176]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000430:	2200      	movs	r2, #0
 8000432:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000434:	4b2a      	ldr	r3, [pc, #168]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800043a:	4b29      	ldr	r3, [pc, #164]	; (80004e0 <MX_ADC1_Init+0xdc>)
 800043c:	2200      	movs	r2, #0
 800043e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000440:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000442:	2200      	movs	r2, #0
 8000444:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000446:	4b26      	ldr	r3, [pc, #152]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000448:	2200      	movs	r2, #0
 800044a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800044e:	4b24      	ldr	r3, [pc, #144]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000450:	2200      	movs	r2, #0
 8000452:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000454:	4b22      	ldr	r3, [pc, #136]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000456:	2201      	movs	r2, #1
 8000458:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800045a:	4b21      	ldr	r3, [pc, #132]	; (80004e0 <MX_ADC1_Init+0xdc>)
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000460:	4b1f      	ldr	r3, [pc, #124]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000462:	2201      	movs	r2, #1
 8000464:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000466:	4b1e      	ldr	r3, [pc, #120]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000468:	2200      	movs	r2, #0
 800046a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800046e:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000470:	2204      	movs	r2, #4
 8000472:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000474:	4b1a      	ldr	r3, [pc, #104]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000476:	2200      	movs	r2, #0
 8000478:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800047a:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <MX_ADC1_Init+0xdc>)
 800047c:	2200      	movs	r2, #0
 800047e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000480:	4817      	ldr	r0, [pc, #92]	; (80004e0 <MX_ADC1_Init+0xdc>)
 8000482:	f000 fc8d 	bl	8000da0 <HAL_ADC_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800048c:	f000 f9f8 	bl	8000880 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000490:	2300      	movs	r3, #0
 8000492:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000494:	f107 031c 	add.w	r3, r7, #28
 8000498:	4619      	mov	r1, r3
 800049a:	4811      	ldr	r0, [pc, #68]	; (80004e0 <MX_ADC1_Init+0xdc>)
 800049c:	f001 fa5e 	bl	800195c <HAL_ADCEx_MultiModeConfigChannel>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80004a6:	f000 f9eb 	bl	8000880 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80004aa:	2302      	movs	r3, #2
 80004ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ae:	2301      	movs	r3, #1
 80004b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004b2:	2300      	movs	r3, #0
 80004b4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004b6:	2300      	movs	r3, #0
 80004b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4619      	mov	r1, r3
 80004c6:	4806      	ldr	r0, [pc, #24]	; (80004e0 <MX_ADC1_Init+0xdc>)
 80004c8:	f000 ff86 	bl	80013d8 <HAL_ADC_ConfigChannel>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80004d2:	f000 f9d5 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004d6:	bf00      	nop
 80004d8:	3728      	adds	r7, #40	; 0x28
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	200000a4 	.word	0x200000a4

080004e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ea:	f107 0310 	add.w	r3, r7, #16
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f8:	1d3b      	adds	r3, r7, #4
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000502:	4b20      	ldr	r3, [pc, #128]	; (8000584 <MX_TIM1_Init+0xa0>)
 8000504:	4a20      	ldr	r2, [pc, #128]	; (8000588 <MX_TIM1_Init+0xa4>)
 8000506:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32500;
 8000508:	4b1e      	ldr	r3, [pc, #120]	; (8000584 <MX_TIM1_Init+0xa0>)
 800050a:	f647 62f4 	movw	r2, #32500	; 0x7ef4
 800050e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000510:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <MX_TIM1_Init+0xa0>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 8000516:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <MX_TIM1_Init+0xa0>)
 8000518:	2232      	movs	r2, #50	; 0x32
 800051a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800051c:	4b19      	ldr	r3, [pc, #100]	; (8000584 <MX_TIM1_Init+0xa0>)
 800051e:	2200      	movs	r2, #0
 8000520:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <MX_TIM1_Init+0xa0>)
 8000524:	2200      	movs	r2, #0
 8000526:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <MX_TIM1_Init+0xa0>)
 800052a:	2200      	movs	r2, #0
 800052c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800052e:	4815      	ldr	r0, [pc, #84]	; (8000584 <MX_TIM1_Init+0xa0>)
 8000530:	f003 f8c8 	bl	80036c4 <HAL_TIM_Base_Init>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800053a:	f000 f9a1 	bl	8000880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800053e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000542:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	4619      	mov	r1, r3
 800054a:	480e      	ldr	r0, [pc, #56]	; (8000584 <MX_TIM1_Init+0xa0>)
 800054c:	f003 fd10 	bl	8003f70 <HAL_TIM_ConfigClockSource>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000556:	f000 f993 	bl	8000880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000562:	2300      	movs	r3, #0
 8000564:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	4619      	mov	r1, r3
 800056a:	4806      	ldr	r0, [pc, #24]	; (8000584 <MX_TIM1_Init+0xa0>)
 800056c:	f004 f9cc 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000576:	f000 f983 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800057a:	bf00      	nop
 800057c:	3720      	adds	r7, #32
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200000f4 	.word	0x200000f4
 8000588:	40012c00 	.word	0x40012c00

0800058c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08a      	sub	sp, #40	; 0x28
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000592:	f107 031c 	add.w	r3, r7, #28
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800059e:	463b      	mov	r3, r7
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
 80005ac:	615a      	str	r2, [r3, #20]
 80005ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <MX_TIM2_Init+0xb0>)
 80005b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 80005b8:	4b20      	ldr	r3, [pc, #128]	; (800063c <MX_TIM2_Init+0xb0>)
 80005ba:	224f      	movs	r2, #79	; 0x4f
 80005bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <MX_TIM2_Init+0xb0>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80005c4:	4b1d      	ldr	r3, [pc, #116]	; (800063c <MX_TIM2_Init+0xb0>)
 80005c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005cc:	4b1b      	ldr	r3, [pc, #108]	; (800063c <MX_TIM2_Init+0xb0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	; (800063c <MX_TIM2_Init+0xb0>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005d8:	4818      	ldr	r0, [pc, #96]	; (800063c <MX_TIM2_Init+0xb0>)
 80005da:	f003 f956 	bl	800388a <HAL_TIM_PWM_Init>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80005e4:	f000 f94c 	bl	8000880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005ec:	2300      	movs	r3, #0
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005f0:	f107 031c 	add.w	r3, r7, #28
 80005f4:	4619      	mov	r1, r3
 80005f6:	4811      	ldr	r0, [pc, #68]	; (800063c <MX_TIM2_Init+0xb0>)
 80005f8:	f004 f986 	bl	8004908 <HAL_TIMEx_MasterConfigSynchronization>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000602:	f000 f93d 	bl	8000880 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000606:	2360      	movs	r3, #96	; 0x60
 8000608:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000616:	463b      	mov	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	4619      	mov	r1, r3
 800061c:	4807      	ldr	r0, [pc, #28]	; (800063c <MX_TIM2_Init+0xb0>)
 800061e:	f003 fb97 	bl	8003d50 <HAL_TIM_PWM_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000628:	f000 f92a 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <MX_TIM2_Init+0xb0>)
 800062e:	f000 f9e9 	bl	8000a04 <HAL_TIM_MspPostInit>

}
 8000632:	bf00      	nop
 8000634:	3728      	adds	r7, #40	; 0x28
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	20000140 	.word	0x20000140

08000640 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000644:	4b14      	ldr	r3, [pc, #80]	; (8000698 <MX_USART2_UART_Init+0x58>)
 8000646:	4a15      	ldr	r2, [pc, #84]	; (800069c <MX_USART2_UART_Init+0x5c>)
 8000648:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800064a:	4b13      	ldr	r3, [pc, #76]	; (8000698 <MX_USART2_UART_Init+0x58>)
 800064c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000650:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000652:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_USART2_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <MX_USART2_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_USART2_UART_Init+0x58>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_USART2_UART_Init+0x58>)
 8000666:	220c      	movs	r2, #12
 8000668:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_USART2_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_USART2_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_USART2_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_USART2_UART_Init+0x58>)
 800067e:	2200      	movs	r2, #0
 8000680:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_USART2_UART_Init+0x58>)
 8000684:	f004 f9cc 	bl	8004a20 <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800068e:	f000 f8f7 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000018c 	.word	0x2000018c
 800069c:	40004400 	.word	0x40004400

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b6:	4b33      	ldr	r3, [pc, #204]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a32      	ldr	r2, [pc, #200]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006c0:	6153      	str	r3, [r2, #20]
 80006c2:	4b30      	ldr	r3, [pc, #192]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	4a2c      	ldr	r2, [pc, #176]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d8:	6153      	str	r3, [r2, #20]
 80006da:	4b2a      	ldr	r3, [pc, #168]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	4b27      	ldr	r3, [pc, #156]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	4a26      	ldr	r2, [pc, #152]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006f0:	6153      	str	r3, [r2, #20]
 80006f2:	4b24      	ldr	r3, [pc, #144]	; (8000784 <MX_GPIO_Init+0xe4>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2120      	movs	r1, #32
 8000702:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000706:	f001 fd49 	bl	800219c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRS_STATE_GPIO_Port, DRS_STATE_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2108      	movs	r1, #8
 800070e:	481e      	ldr	r0, [pc, #120]	; (8000788 <MX_GPIO_Init+0xe8>)
 8000710:	f001 fd44 	bl	800219c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000714:	2320      	movs	r3, #32
 8000716:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	4619      	mov	r1, r3
 800072a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072e:	f001 fbab 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000736:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_GPIO_Init+0xec>)
 800073a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	4619      	mov	r1, r3
 8000746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074a:	f001 fb9d 	bl	8001e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRS_STATE_Pin */
  GPIO_InitStruct.Pin = DRS_STATE_Pin;
 800074e:	2308      	movs	r3, #8
 8000750:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRS_STATE_GPIO_Port, &GPIO_InitStruct);
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	4619      	mov	r1, r3
 8000764:	4808      	ldr	r0, [pc, #32]	; (8000788 <MX_GPIO_Init+0xe8>)
 8000766:	f001 fb8f 	bl	8001e88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	2017      	movs	r0, #23
 8000770:	f001 fb53 	bl	8001e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000774:	2017      	movs	r0, #23
 8000776:	f001 fb6c 	bl	8001e52 <HAL_NVIC_EnableIRQ>

}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40021000 	.word	0x40021000
 8000788:	48000400 	.word	0x48000400
 800078c:	10110000 	.word	0x10110000

08000790 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_9 && state == true) {
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007a0:	d10a      	bne.n	80007b8 <HAL_GPIO_EXTI_Callback+0x28>
 80007a2:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <HAL_GPIO_EXTI_Callback+0x34>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d006      	beq.n	80007b8 <HAL_GPIO_EXTI_Callback+0x28>
		HAL_TIM_Base_Start_IT(&htim1);
 80007aa:	4807      	ldr	r0, [pc, #28]	; (80007c8 <HAL_GPIO_EXTI_Callback+0x38>)
 80007ac:	f002 ffe2 	bl	8003774 <HAL_TIM_Base_Start_IT>
		state = false;
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <HAL_GPIO_EXTI_Callback+0x34>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	e001      	b.n	80007bc <HAL_GPIO_EXTI_Callback+0x2c>
	} else {
		__NOP();
 80007b8:	bf00      	nop
	}
}
 80007ba:	bf00      	nop
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000000 	.word	0x20000000
 80007c8:	200000f4 	.word	0x200000f4

080007cc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9) == GPIO_PIN_RESET){
 80007d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007dc:	f001 fcc6 	bl	800216c <HAL_GPIO_ReadPin>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d10e      	bne.n	8000804 <HAL_TIM_PeriodElapsedCallback+0x38>
		if (drs_flag) {
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_TIM_PeriodElapsedCallback+0x40>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d002      	beq.n	80007f4 <HAL_TIM_PeriodElapsedCallback+0x28>
			closeDRS();
 80007ee:	f000 f831 	bl	8000854 <closeDRS>
 80007f2:	e001      	b.n	80007f8 <HAL_TIM_PeriodElapsedCallback+0x2c>
		} else {
			openDRS();
 80007f4:	f000 f810 	bl	8000818 <openDRS>
		}
		state = true;
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim1);
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000800:	f003 f814 	bl	800382c <HAL_TIM_Base_Stop_IT>
	}
}
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000090 	.word	0x20000090
 8000810:	20000000 	.word	0x20000000
 8000814:	200000f4 	.word	0x200000f4

08000818 <openDRS>:

void openDRS() {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	if (potVal > 100) return;
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <openDRS+0x2c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b64      	cmp	r3, #100	; 0x64
 8000822:	dc0c      	bgt.n	800083e <openDRS+0x26>
	htim2.Instance->CCR1 = 85;  // duty cycle is 1.5 ms
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <openDRS+0x30>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2255      	movs	r2, #85	; 0x55
 800082a:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(DRS_STATE_GPIO_Port, DRS_STATE_Pin, 1);
 800082c:	2201      	movs	r2, #1
 800082e:	2108      	movs	r1, #8
 8000830:	4806      	ldr	r0, [pc, #24]	; (800084c <openDRS+0x34>)
 8000832:	f001 fcb3 	bl	800219c <HAL_GPIO_WritePin>
	drs_flag = true;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <openDRS+0x38>)
 8000838:	2201      	movs	r2, #1
 800083a:	701a      	strb	r2, [r3, #0]
 800083c:	e000      	b.n	8000840 <openDRS+0x28>
	if (potVal > 100) return;
 800083e:	bf00      	nop
}
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	200000a0 	.word	0x200000a0
 8000848:	20000140 	.word	0x20000140
 800084c:	48000400 	.word	0x48000400
 8000850:	20000090 	.word	0x20000090

08000854 <closeDRS>:

void closeDRS() {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	htim2.Instance->CCR1 = 72;  // duty cycle is 1.5 ms
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <closeDRS+0x20>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2248      	movs	r2, #72	; 0x48
 800085e:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(DRS_STATE_GPIO_Port, DRS_STATE_Pin, 0);
 8000860:	2200      	movs	r2, #0
 8000862:	2108      	movs	r1, #8
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <closeDRS+0x24>)
 8000866:	f001 fc99 	bl	800219c <HAL_GPIO_WritePin>
	drs_flag = false;
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <closeDRS+0x28>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
}
 8000870:	bf00      	nop
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000140 	.word	0x20000140
 8000878:	48000400 	.word	0x48000400
 800087c:	20000090 	.word	0x20000090

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	e7fe      	b.n	8000888 <Error_Handler+0x8>
	...

0800088c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_MspInit+0x44>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <HAL_MspInit+0x44>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6193      	str	r3, [r2, #24]
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_MspInit+0x44>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_MspInit+0x44>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <HAL_MspInit+0x44>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	61d3      	str	r3, [r2, #28]
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_MspInit+0x44>)
 80008b8:	69db      	ldr	r3, [r3, #28]
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008f4:	d124      	bne.n	8000940 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <HAL_ADC_MspInit+0x74>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	4a13      	ldr	r2, [pc, #76]	; (8000948 <HAL_ADC_MspInit+0x74>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	6153      	str	r3, [r2, #20]
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <HAL_ADC_MspInit+0x74>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_ADC_MspInit+0x74>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <HAL_ADC_MspInit+0x74>)
 8000914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000918:	6153      	str	r3, [r2, #20]
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <HAL_ADC_MspInit+0x74>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000926:	2302      	movs	r3, #2
 8000928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092a:	2303      	movs	r3, #3
 800092c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000932:	f107 0314 	add.w	r3, r7, #20
 8000936:	4619      	mov	r1, r3
 8000938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093c:	f001 faa4 	bl	8001e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000940:	bf00      	nop
 8000942:	3728      	adds	r7, #40	; 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40021000 	.word	0x40021000

0800094c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a19      	ldr	r2, [pc, #100]	; (80009c0 <HAL_TIM_Base_MspInit+0x74>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d12b      	bne.n	80009b6 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <HAL_TIM_Base_MspInit+0x78>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	4a18      	ldr	r2, [pc, #96]	; (80009c4 <HAL_TIM_Base_MspInit+0x78>)
 8000964:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000968:	6193      	str	r3, [r2, #24]
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <HAL_TIM_Base_MspInit+0x78>)
 800096c:	699b      	ldr	r3, [r3, #24]
 800096e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	2018      	movs	r0, #24
 800097c:	f001 fa4d 	bl	8001e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000980:	2018      	movs	r0, #24
 8000982:	f001 fa66 	bl	8001e52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	2019      	movs	r0, #25
 800098c:	f001 fa45 	bl	8001e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000990:	2019      	movs	r0, #25
 8000992:	f001 fa5e 	bl	8001e52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	201a      	movs	r0, #26
 800099c:	f001 fa3d 	bl	8001e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80009a0:	201a      	movs	r0, #26
 80009a2:	f001 fa56 	bl	8001e52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	201b      	movs	r0, #27
 80009ac:	f001 fa35 	bl	8001e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80009b0:	201b      	movs	r0, #27
 80009b2:	f001 fa4e 	bl	8001e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009b6:	bf00      	nop
 80009b8:	3710      	adds	r7, #16
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40012c00 	.word	0x40012c00
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009d8:	d10b      	bne.n	80009f2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <HAL_TIM_PWM_MspInit+0x38>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	4a08      	ldr	r2, [pc, #32]	; (8000a00 <HAL_TIM_PWM_MspInit+0x38>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	61d3      	str	r3, [r2, #28]
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <HAL_TIM_PWM_MspInit+0x38>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000

08000a04 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a24:	d11c      	bne.n	8000a60 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <HAL_TIM_MspPostInit+0x64>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	; (8000a68 <HAL_TIM_MspPostInit+0x64>)
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a30:	6153      	str	r3, [r2, #20]
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <HAL_TIM_MspPostInit+0x64>)
 8000a34:	695b      	ldr	r3, [r3, #20]
 8000a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4619      	mov	r1, r3
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f001 fa14 	bl	8001e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3720      	adds	r7, #32
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a18      	ldr	r2, [pc, #96]	; (8000aec <HAL_UART_MspInit+0x80>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d129      	bne.n	8000ae2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a8e:	4b18      	ldr	r3, [pc, #96]	; (8000af0 <HAL_UART_MspInit+0x84>)
 8000a90:	69db      	ldr	r3, [r3, #28]
 8000a92:	4a17      	ldr	r2, [pc, #92]	; (8000af0 <HAL_UART_MspInit+0x84>)
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	61d3      	str	r3, [r2, #28]
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_UART_MspInit+0x84>)
 8000a9c:	69db      	ldr	r3, [r3, #28]
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_UART_MspInit+0x84>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	4a11      	ldr	r2, [pc, #68]	; (8000af0 <HAL_UART_MspInit+0x84>)
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab0:	6153      	str	r3, [r2, #20]
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <HAL_UART_MspInit+0x84>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000abe:	f248 0304 	movw	r3, #32772	; 0x8004
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad0:	2307      	movs	r3, #7
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ade:	f001 f9d3 	bl	8001e88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	; 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40004400 	.word	0x40004400
 8000af0:	40021000 	.word	0x40021000

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b40:	f000 f8ea 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000b4c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b50:	f001 fb3c 	bl	80021cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000b5e:	f002 ffd7 	bl	8003b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200000f4 	.word	0x200000f4

08000b6c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000b72:	f002 ffcd 	bl	8003b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200000f4 	.word	0x200000f4

08000b80 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b84:	4802      	ldr	r0, [pc, #8]	; (8000b90 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000b86:	f002 ffc3 	bl	8003b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200000f4 	.word	0x200000f4

08000b94 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b98:	4802      	ldr	r0, [pc, #8]	; (8000ba4 <TIM1_CC_IRQHandler+0x10>)
 8000b9a:	f002 ffb9 	bl	8003b10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200000f4 	.word	0x200000f4

08000ba8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb0:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <_sbrk+0x5c>)
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <_sbrk+0x60>)
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <_sbrk+0x64>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d102      	bne.n	8000bca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <_sbrk+0x64>)
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <_sbrk+0x68>)
 8000bc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <_sbrk+0x64>)
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d207      	bcs.n	8000be8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bd8:	f004 faa6 	bl	8005128 <__errno>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	220c      	movs	r2, #12
 8000be0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be2:	f04f 33ff 	mov.w	r3, #4294967295
 8000be6:	e009      	b.n	8000bfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <_sbrk+0x64>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a05      	ldr	r2, [pc, #20]	; (8000c0c <_sbrk+0x64>)
 8000bf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20003000 	.word	0x20003000
 8000c08:	00000400 	.word	0x00000400
 8000c0c:	20000094 	.word	0x20000094
 8000c10:	20000228 	.word	0x20000228

08000c14 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c70 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c3e:	490e      	ldr	r1, [pc, #56]	; (8000c78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <LoopForever+0xe>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c54:	4c0b      	ldr	r4, [pc, #44]	; (8000c84 <LoopForever+0x16>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c62:	f7ff ffd7 	bl	8000c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f004 fa65 	bl	8005134 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c6a:	f7ff fb09 	bl	8000280 <main>

08000c6e <LoopForever>:

LoopForever:
    b LoopForever
 8000c6e:	e7fe      	b.n	8000c6e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c70:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c7c:	08005c98 	.word	0x08005c98
  ldr r2, =_sbss
 8000c80:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c84:	20000224 	.word	0x20000224

08000c88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC1_2_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_Init+0x28>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_Init+0x28>)
 8000c96:	f043 0310 	orr.w	r3, r3, #16
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f001 f8b1 	bl	8001e04 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 f808 	bl	8000cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff fdf0 	bl	800088c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40022000 	.word	0x40022000

08000cb8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f001 f8c9 	bl	8001e6e <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f001 f891 	bl	8001e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000004 	.word	0x20000004
 8000d10:	2000000c 	.word	0x2000000c
 8000d14:	20000008 	.word	0x20000008

08000d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	2000000c 	.word	0x2000000c
 8000d3c:	20000210 	.word	0x20000210

08000d40 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000210 	.word	0x20000210

08000d58 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffee 	bl	8000d40 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffde 	bl	8000d40 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000000c 	.word	0x2000000c

08000da0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b09a      	sub	sp, #104	; 0x68
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d101      	bne.n	8000dc0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e172      	b.n	80010a6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	691b      	ldr	r3, [r3, #16]
 8000dc4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 0310 	and.w	r3, r3, #16
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d176      	bne.n	8000ec0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d152      	bne.n	8000e80 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff fd6d 	bl	80008d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d13b      	bne.n	8000e80 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 fecb 	bl	8001ba4 <ADC_Disable>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d12f      	bne.n	8000e80 <HAL_ADC_Init+0xe0>
 8000e20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d12b      	bne.n	8000e80 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e30:	f023 0302 	bic.w	r3, r3, #2
 8000e34:	f043 0202 	orr.w	r2, r3, #2
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e4a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e5a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e5c:	4b94      	ldr	r3, [pc, #592]	; (80010b0 <HAL_ADC_Init+0x310>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a94      	ldr	r2, [pc, #592]	; (80010b4 <HAL_ADC_Init+0x314>)
 8000e62:	fba2 2303 	umull	r2, r3, r2, r3
 8000e66:	0c9a      	lsrs	r2, r3, #18
 8000e68:	4613      	mov	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e72:	e002      	b.n	8000e7a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1f9      	bne.n	8000e74 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d007      	beq.n	8000e9e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e9c:	d110      	bne.n	8000ec0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	f023 0312 	bic.w	r3, r3, #18
 8000ea6:	f043 0210 	orr.w	r2, r3, #16
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	f043 0201 	orr.w	r2, r3, #1
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f003 0310 	and.w	r3, r3, #16
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f040 80df 	bne.w	800108c <HAL_ADC_Init+0x2ec>
 8000ece:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f040 80da 	bne.w	800108c <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f040 80d2 	bne.w	800108c <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ef0:	f043 0202 	orr.w	r2, r3, #2
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ef8:	4b6f      	ldr	r3, [pc, #444]	; (80010b8 <HAL_ADC_Init+0x318>)
 8000efa:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f04:	d102      	bne.n	8000f0c <HAL_ADC_Init+0x16c>
 8000f06:	4b6d      	ldr	r3, [pc, #436]	; (80010bc <HAL_ADC_Init+0x31c>)
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	e002      	b.n	8000f12 <HAL_ADC_Init+0x172>
 8000f0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000f10:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d108      	bne.n	8000f32 <HAL_ADC_Init+0x192>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d101      	bne.n	8000f32 <HAL_ADC_Init+0x192>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <HAL_ADC_Init+0x194>
 8000f32:	2300      	movs	r3, #0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11c      	bne.n	8000f72 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f38:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d010      	beq.n	8000f60 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d107      	bne.n	8000f5a <HAL_ADC_Init+0x1ba>
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d101      	bne.n	8000f5a <HAL_ADC_Init+0x1ba>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_ADC_Init+0x1bc>
 8000f5a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d108      	bne.n	8000f72 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f70:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	7e5b      	ldrb	r3, [r3, #25]
 8000f76:	035b      	lsls	r3, r3, #13
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f7c:	2a01      	cmp	r2, #1
 8000f7e:	d002      	beq.n	8000f86 <HAL_ADC_Init+0x1e6>
 8000f80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f84:	e000      	b.n	8000f88 <HAL_ADC_Init+0x1e8>
 8000f86:	2200      	movs	r2, #0
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d11b      	bne.n	8000fde <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	7e5b      	ldrb	r3, [r3, #25]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d109      	bne.n	8000fc2 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	045a      	lsls	r2, r3, #17
 8000fb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fbe:	663b      	str	r3, [r7, #96]	; 0x60
 8000fc0:	e00d      	b.n	8000fde <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000fca:	f043 0220 	orr.w	r2, r3, #32
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f043 0201 	orr.w	r2, r3, #1
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d007      	beq.n	8000ff6 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f003 030c 	and.w	r3, r3, #12
 8001000:	2b00      	cmp	r3, #0
 8001002:	d114      	bne.n	800102e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6812      	ldr	r2, [r2, #0]
 800100e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001012:	f023 0302 	bic.w	r3, r3, #2
 8001016:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7e1b      	ldrb	r3, [r3, #24]
 800101c:	039a      	lsls	r2, r3, #14
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4313      	orrs	r3, r2
 8001028:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800102a:	4313      	orrs	r3, r2
 800102c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	4b22      	ldr	r3, [pc, #136]	; (80010c0 <HAL_ADC_Init+0x320>)
 8001036:	4013      	ands	r3, r2
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800103e:	430b      	orrs	r3, r1
 8001040:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	691b      	ldr	r3, [r3, #16]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d10c      	bne.n	8001064 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	f023 010f 	bic.w	r1, r3, #15
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	1e5a      	subs	r2, r3, #1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	430a      	orrs	r2, r1
 8001060:	631a      	str	r2, [r3, #48]	; 0x30
 8001062:	e007      	b.n	8001074 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 020f 	bic.w	r2, r2, #15
 8001072:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f023 0303 	bic.w	r3, r3, #3
 8001082:	f043 0201 	orr.w	r2, r3, #1
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	641a      	str	r2, [r3, #64]	; 0x40
 800108a:	e00a      	b.n	80010a2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	f023 0312 	bic.w	r3, r3, #18
 8001094:	f043 0210 	orr.w	r2, r3, #16
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800109c:	2301      	movs	r3, #1
 800109e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80010a2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3768      	adds	r7, #104	; 0x68
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000004 	.word	0x20000004
 80010b4:	431bde83 	.word	0x431bde83
 80010b8:	50000300 	.word	0x50000300
 80010bc:	50000100 	.word	0x50000100
 80010c0:	fff0c007 	.word	0xfff0c007

080010c4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f040 809c 	bne.w	8001218 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d101      	bne.n	80010ee <HAL_ADC_Start+0x2a>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e097      	b.n	800121e <HAL_ADC_Start+0x15a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2201      	movs	r2, #1
 80010f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 fcf6 	bl	8001ae8 <ADC_Enable>
 80010fc:	4603      	mov	r3, r0
 80010fe:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	2b00      	cmp	r3, #0
 8001104:	f040 8083 	bne.w	800120e <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001110:	f023 0301 	bic.w	r3, r3, #1
 8001114:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800111c:	4b42      	ldr	r3, [pc, #264]	; (8001228 <HAL_ADC_Start+0x164>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	f003 031f 	and.w	r3, r3, #31
 8001124:	2b00      	cmp	r3, #0
 8001126:	d004      	beq.n	8001132 <HAL_ADC_Start+0x6e>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001130:	d115      	bne.n	800115e <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d027      	beq.n	800119c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001154:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800115c:	e01e      	b.n	800119c <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001172:	d004      	beq.n	800117e <HAL_ADC_Start+0xba>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a2c      	ldr	r2, [pc, #176]	; (800122c <HAL_ADC_Start+0x168>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d10e      	bne.n	800119c <HAL_ADC_Start+0xd8>
 800117e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d007      	beq.n	800119c <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001194:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011a8:	d106      	bne.n	80011b8 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	f023 0206 	bic.w	r2, r3, #6
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	645a      	str	r2, [r3, #68]	; 0x44
 80011b6:	e002      	b.n	80011be <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	221c      	movs	r2, #28
 80011cc:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80011ce:	4b16      	ldr	r3, [pc, #88]	; (8001228 <HAL_ADC_Start+0x164>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 031f 	and.w	r3, r3, #31
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d010      	beq.n	80011fc <HAL_ADC_Start+0x138>
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <HAL_ADC_Start+0x164>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 031f 	and.w	r3, r3, #31
 80011e2:	2b05      	cmp	r3, #5
 80011e4:	d00a      	beq.n	80011fc <HAL_ADC_Start+0x138>
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <HAL_ADC_Start+0x164>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 031f 	and.w	r3, r3, #31
 80011ee:	2b09      	cmp	r3, #9
 80011f0:	d004      	beq.n	80011fc <HAL_ADC_Start+0x138>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011fa:	d10f      	bne.n	800121c <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	689a      	ldr	r2, [r3, #8]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0204 	orr.w	r2, r2, #4
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	e006      	b.n	800121c <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001216:	e001      	b.n	800121c <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001218:	2302      	movs	r3, #2
 800121a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800121c:	7bfb      	ldrb	r3, [r7, #15]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	50000300 	.word	0x50000300
 800122c:	50000100 	.word	0x50000100

08001230 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	2b08      	cmp	r3, #8
 8001244:	d102      	bne.n	800124c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001246:	2308      	movs	r3, #8
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	e02e      	b.n	80012aa <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800124c:	4b5a      	ldr	r3, [pc, #360]	; (80013b8 <HAL_ADC_PollForConversion+0x188>)
 800124e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f003 031f 	and.w	r3, r3, #31
 8001258:	2b00      	cmp	r3, #0
 800125a:	d112      	bne.n	8001282 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b01      	cmp	r3, #1
 8001268:	d11d      	bne.n	80012a6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f043 0220 	orr.w	r2, r3, #32
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e096      	b.n	80013b0 <HAL_ADC_PollForConversion+0x180>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00b      	beq.n	80012a6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f043 0220 	orr.w	r2, r3, #32
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e084      	b.n	80013b0 <HAL_ADC_PollForConversion+0x180>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80012a6:	230c      	movs	r3, #12
 80012a8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012aa:	4b43      	ldr	r3, [pc, #268]	; (80013b8 <HAL_ADC_PollForConversion+0x188>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 031f 	and.w	r3, r3, #31
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d004      	beq.n	80012c0 <HAL_ADC_PollForConversion+0x90>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012be:	d104      	bne.n	80012ca <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	e003      	b.n	80012d2 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80012ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80012d2:	f7ff fd35 	bl	8000d40 <HAL_GetTick>
 80012d6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80012d8:	e01a      	b.n	8001310 <HAL_ADC_PollForConversion+0xe0>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e0:	d016      	beq.n	8001310 <HAL_ADC_PollForConversion+0xe0>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d007      	beq.n	80012f8 <HAL_ADC_PollForConversion+0xc8>
 80012e8:	f7ff fd2a 	bl	8000d40 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d20b      	bcs.n	8001310 <HAL_ADC_PollForConversion+0xe0>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f043 0204 	orr.w	r2, r3, #4
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e04f      	b.n	80013b0 <HAL_ADC_PollForConversion+0x180>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0dd      	beq.n	80012da <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001334:	2b00      	cmp	r3, #0
 8001336:	d131      	bne.n	800139c <HAL_ADC_PollForConversion+0x16c>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800133e:	2b00      	cmp	r3, #0
 8001340:	d12c      	bne.n	800139c <HAL_ADC_PollForConversion+0x16c>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	2b08      	cmp	r3, #8
 800134e:	d125      	bne.n	800139c <HAL_ADC_PollForConversion+0x16c>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	2b00      	cmp	r3, #0
 800135c:	d112      	bne.n	8001384 <HAL_ADC_PollForConversion+0x154>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d112      	bne.n	800139c <HAL_ADC_PollForConversion+0x16c>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f043 0201 	orr.w	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	641a      	str	r2, [r3, #64]	; 0x40
 8001382:	e00b      	b.n	800139c <HAL_ADC_PollForConversion+0x16c>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f043 0220 	orr.w	r2, r3, #32
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	f043 0201 	orr.w	r2, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d103      	bne.n	80013ae <HAL_ADC_PollForConversion+0x17e>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	50000300 	.word	0x50000300

080013bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013d8:	b480      	push	{r7}
 80013da:	b09b      	sub	sp, #108	; 0x6c
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d101      	bne.n	80013fa <HAL_ADC_ConfigChannel+0x22>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e2a5      	b.n	8001946 <HAL_ADC_ConfigChannel+0x56e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b00      	cmp	r3, #0
 800140e:	f040 8289 	bne.w	8001924 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b04      	cmp	r3, #4
 8001418:	d81c      	bhi.n	8001454 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	461a      	mov	r2, r3
 800142e:	231f      	movs	r3, #31
 8001430:	4093      	lsls	r3, r2
 8001432:	43db      	mvns	r3, r3
 8001434:	4019      	ands	r1, r3
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fa00 f203 	lsl.w	r2, r0, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	631a      	str	r2, [r3, #48]	; 0x30
 8001452:	e063      	b.n	800151c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b09      	cmp	r3, #9
 800145a:	d81e      	bhi.n	800149a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	3b1e      	subs	r3, #30
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	4019      	ands	r1, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	3b1e      	subs	r3, #30
 800148c:	fa00 f203 	lsl.w	r2, r0, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34
 8001498:	e040      	b.n	800151c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b0e      	cmp	r3, #14
 80014a0:	d81e      	bhi.n	80014e0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	3b3c      	subs	r3, #60	; 0x3c
 80014b6:	221f      	movs	r2, #31
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	4019      	ands	r1, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	3b3c      	subs	r3, #60	; 0x3c
 80014d2:	fa00 f203 	lsl.w	r2, r0, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	639a      	str	r2, [r3, #56]	; 0x38
 80014de:	e01d      	b.n	800151c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	3b5a      	subs	r3, #90	; 0x5a
 80014f4:	221f      	movs	r2, #31
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	4019      	ands	r1, r3
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	3b5a      	subs	r3, #90	; 0x5a
 8001510:	fa00 f203 	lsl.w	r2, r0, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b00      	cmp	r3, #0
 8001528:	f040 80e5 	bne.w	80016f6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b09      	cmp	r3, #9
 8001532:	d91c      	bls.n	800156e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6999      	ldr	r1, [r3, #24]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	3b1e      	subs	r3, #30
 8001546:	2207      	movs	r2, #7
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	4019      	ands	r1, r3
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	6898      	ldr	r0, [r3, #8]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	3b1e      	subs	r3, #30
 8001560:	fa00 f203 	lsl.w	r2, r0, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	619a      	str	r2, [r3, #24]
 800156c:	e019      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6959      	ldr	r1, [r3, #20]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	2207      	movs	r2, #7
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	4019      	ands	r1, r3
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	6898      	ldr	r0, [r3, #8]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4613      	mov	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	fa00 f203 	lsl.w	r2, r0, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	08db      	lsrs	r3, r3, #3
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	3b01      	subs	r3, #1
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d84f      	bhi.n	8001664 <HAL_ADC_ConfigChannel+0x28c>
 80015c4:	a201      	add	r2, pc, #4	; (adr r2, 80015cc <HAL_ADC_ConfigChannel+0x1f4>)
 80015c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ca:	bf00      	nop
 80015cc:	080015dd 	.word	0x080015dd
 80015d0:	080015ff 	.word	0x080015ff
 80015d4:	08001621 	.word	0x08001621
 80015d8:	08001643 	.word	0x08001643
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015e2:	4b9e      	ldr	r3, [pc, #632]	; (800185c <HAL_ADC_ConfigChannel+0x484>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	0691      	lsls	r1, r2, #26
 80015ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80015ee:	430a      	orrs	r2, r1
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015fa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015fc:	e07e      	b.n	80016fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001604:	4b95      	ldr	r3, [pc, #596]	; (800185c <HAL_ADC_ConfigChannel+0x484>)
 8001606:	4013      	ands	r3, r2
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	0691      	lsls	r1, r2, #26
 800160e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001610:	430a      	orrs	r2, r1
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800161c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800161e:	e06d      	b.n	80016fc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001626:	4b8d      	ldr	r3, [pc, #564]	; (800185c <HAL_ADC_ConfigChannel+0x484>)
 8001628:	4013      	ands	r3, r2
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	0691      	lsls	r1, r2, #26
 8001630:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001632:	430a      	orrs	r2, r1
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800163e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001640:	e05c      	b.n	80016fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001648:	4b84      	ldr	r3, [pc, #528]	; (800185c <HAL_ADC_ConfigChannel+0x484>)
 800164a:	4013      	ands	r3, r2
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	0691      	lsls	r1, r2, #26
 8001652:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001654:	430a      	orrs	r2, r1
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001660:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001662:	e04b      	b.n	80016fc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	069b      	lsls	r3, r3, #26
 8001674:	429a      	cmp	r2, r3
 8001676:	d107      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001686:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800168e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	069b      	lsls	r3, r3, #26
 8001698:	429a      	cmp	r2, r3
 800169a:	d107      	bne.n	80016ac <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016aa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	069b      	lsls	r3, r3, #26
 80016bc:	429a      	cmp	r2, r3
 80016be:	d107      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016ce:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	069b      	lsls	r3, r3, #26
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d10a      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016f2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80016f4:	e001      	b.n	80016fa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80016f6:	bf00      	nop
 80016f8:	e000      	b.n	80016fc <HAL_ADC_ConfigChannel+0x324>
      break;
 80016fa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b01      	cmp	r3, #1
 8001708:	d108      	bne.n	800171c <HAL_ADC_ConfigChannel+0x344>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_ADC_ConfigChannel+0x344>
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <HAL_ADC_ConfigChannel+0x346>
 800171c:	2300      	movs	r3, #0
 800171e:	2b00      	cmp	r3, #0
 8001720:	f040 810b 	bne.w	800193a <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d00f      	beq.n	800174c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2201      	movs	r2, #1
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	400a      	ands	r2, r1
 8001746:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800174a:	e049      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2201      	movs	r2, #1
 800175a:	409a      	lsls	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b09      	cmp	r3, #9
 800176c:	d91c      	bls.n	80017a8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6999      	ldr	r1, [r3, #24]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	3b1b      	subs	r3, #27
 8001780:	2207      	movs	r2, #7
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	4019      	ands	r1, r3
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6898      	ldr	r0, [r3, #8]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4613      	mov	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	3b1b      	subs	r3, #27
 800179a:	fa00 f203 	lsl.w	r2, r0, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	619a      	str	r2, [r3, #24]
 80017a6:	e01b      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6959      	ldr	r1, [r3, #20]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	2207      	movs	r2, #7
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4019      	ands	r1, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	6898      	ldr	r0, [r3, #8]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	4613      	mov	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	fa00 f203 	lsl.w	r2, r0, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017e0:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <HAL_ADC_ConfigChannel+0x488>)
 80017e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b10      	cmp	r3, #16
 80017ea:	d105      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d015      	beq.n	8001824 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017fc:	2b11      	cmp	r3, #17
 80017fe:	d105      	bne.n	800180c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001800:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00b      	beq.n	8001824 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001810:	2b12      	cmp	r3, #18
 8001812:	f040 8092 	bne.w	800193a <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001816:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 808b 	bne.w	800193a <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800182c:	d102      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x45c>
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <HAL_ADC_ConfigChannel+0x48c>)
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	e002      	b.n	800183a <HAL_ADC_ConfigChannel+0x462>
 8001834:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001838:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b01      	cmp	r3, #1
 8001846:	d10f      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x490>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b01      	cmp	r3, #1
 8001854:	d108      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x490>
 8001856:	2301      	movs	r3, #1
 8001858:	e007      	b.n	800186a <HAL_ADC_ConfigChannel+0x492>
 800185a:	bf00      	nop
 800185c:	83fff000 	.word	0x83fff000
 8001860:	50000300 	.word	0x50000300
 8001864:	50000100 	.word	0x50000100
 8001868:	2300      	movs	r3, #0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d150      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800186e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001870:	2b00      	cmp	r3, #0
 8001872:	d010      	beq.n	8001896 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d107      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x4b8>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x4b8>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <HAL_ADC_ConfigChannel+0x4ba>
 8001890:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001892:	2b00      	cmp	r3, #0
 8001894:	d13c      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b10      	cmp	r3, #16
 800189c:	d11d      	bne.n	80018da <HAL_ADC_ConfigChannel+0x502>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018a6:	d118      	bne.n	80018da <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80018a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018b2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018b4:	4b27      	ldr	r3, [pc, #156]	; (8001954 <HAL_ADC_ConfigChannel+0x57c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a27      	ldr	r2, [pc, #156]	; (8001958 <HAL_ADC_ConfigChannel+0x580>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0c9a      	lsrs	r2, r3, #18
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018ca:	e002      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f9      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018d8:	e02e      	b.n	8001938 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b11      	cmp	r3, #17
 80018e0:	d10b      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x522>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ea:	d106      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80018ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80018f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018f6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018f8:	e01e      	b.n	8001938 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b12      	cmp	r3, #18
 8001900:	d11a      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800190a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800190c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800190e:	e013      	b.n	8001938 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	f043 0220 	orr.w	r2, r3, #32
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001922:	e00a      	b.n	800193a <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f043 0220 	orr.w	r2, r3, #32
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001936:	e000      	b.n	800193a <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001938:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001942:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001946:	4618      	mov	r0, r3
 8001948:	376c      	adds	r7, #108	; 0x6c
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000004 	.word	0x20000004
 8001958:	431bde83 	.word	0x431bde83

0800195c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800195c:	b480      	push	{r7}
 800195e:	b099      	sub	sp, #100	; 0x64
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001974:	d102      	bne.n	800197c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001976:	4b5a      	ldr	r3, [pc, #360]	; (8001ae0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	e002      	b.n	8001982 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800197c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001980:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0a2      	b.n	8001ad2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001996:	2302      	movs	r3, #2
 8001998:	e09b      	b.n	8001ad2 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d17f      	bne.n	8001ab0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d179      	bne.n	8001ab0 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019bc:	4b49      	ldr	r3, [pc, #292]	; (8001ae4 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80019be:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d040      	beq.n	8001a4a <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80019c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019da:	035b      	lsls	r3, r3, #13
 80019dc:	430b      	orrs	r3, r1
 80019de:	431a      	orrs	r2, r3
 80019e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019e2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d108      	bne.n	8001a04 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001a04:	2300      	movs	r3, #0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d15c      	bne.n	8001ac4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d107      	bne.n	8001a26 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001a22:	2301      	movs	r3, #1
 8001a24:	e000      	b.n	8001a28 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8001a26:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d14b      	bne.n	8001ac4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a34:	f023 030f 	bic.w	r3, r3, #15
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	6811      	ldr	r1, [r2, #0]
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	6892      	ldr	r2, [r2, #8]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	431a      	orrs	r2, r3
 8001a44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a46:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a48:	e03c      	b.n	8001ac4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a54:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d108      	bne.n	8001a76 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001a76:	2300      	movs	r3, #0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d123      	bne.n	8001ac4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d107      	bne.n	8001a98 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001a98:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d112      	bne.n	8001ac4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001aa6:	f023 030f 	bic.w	r3, r3, #15
 8001aaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001aac:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001aae:	e009      	b.n	8001ac4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f043 0220 	orr.w	r2, r3, #32
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001ac2:	e000      	b.n	8001ac6 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ac4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ace:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3764      	adds	r7, #100	; 0x64
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	50000100 	.word	0x50000100
 8001ae4:	50000300 	.word	0x50000300

08001ae8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 0303 	and.w	r3, r3, #3
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d108      	bne.n	8001b14 <ADC_Enable+0x2c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <ADC_Enable+0x2c>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <ADC_Enable+0x2e>
 8001b14:	2300      	movs	r3, #0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d13c      	bne.n	8001b94 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <ADC_Enable+0xb8>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00d      	beq.n	8001b44 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f043 0210 	orr.w	r2, r3, #16
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b38:	f043 0201 	orr.w	r2, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e028      	b.n	8001b96 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689a      	ldr	r2, [r3, #8]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0201 	orr.w	r2, r2, #1
 8001b52:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001b54:	f7ff f8f4 	bl	8000d40 <HAL_GetTick>
 8001b58:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b5a:	e014      	b.n	8001b86 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b5c:	f7ff f8f0 	bl	8000d40 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d90d      	bls.n	8001b86 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f043 0210 	orr.w	r2, r3, #16
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f043 0201 	orr.w	r2, r3, #1
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e007      	b.n	8001b96 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d1e3      	bne.n	8001b5c <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	8000003f 	.word	0x8000003f

08001ba4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d108      	bne.n	8001bd0 <ADC_Disable+0x2c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <ADC_Disable+0x2c>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <ADC_Disable+0x2e>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d040      	beq.n	8001c58 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 030d 	and.w	r3, r3, #13
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d10f      	bne.n	8001c04 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f042 0202 	orr.w	r2, r2, #2
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001bfc:	f7ff f8a0 	bl	8000d40 <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c02:	e022      	b.n	8001c4a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f043 0210 	orr.w	r2, r3, #16
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c14:	f043 0201 	orr.w	r2, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e01c      	b.n	8001c5a <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c20:	f7ff f88e 	bl	8000d40 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d90d      	bls.n	8001c4a <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f043 0210 	orr.w	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f043 0201 	orr.w	r2, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e007      	b.n	8001c5a <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d0e3      	beq.n	8001c20 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c7a:	68ba      	ldr	r2, [r7, #8]
 8001c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c80:	4013      	ands	r3, r2
 8001c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	60d3      	str	r3, [r2, #12]
}
 8001c9c:	bf00      	nop
 8001c9e:	3714      	adds	r7, #20
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	f003 0307 	and.w	r3, r3, #7
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	4603      	mov	r3, r0
 8001cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	db0b      	blt.n	8001cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	f003 021f 	and.w	r2, r3, #31
 8001ce0:	4907      	ldr	r1, [pc, #28]	; (8001d00 <__NVIC_EnableIRQ+0x38>)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	095b      	lsrs	r3, r3, #5
 8001ce8:	2001      	movs	r0, #1
 8001cea:	fa00 f202 	lsl.w	r2, r0, r2
 8001cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000e100 	.word	0xe000e100

08001d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	db0a      	blt.n	8001d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	490c      	ldr	r1, [pc, #48]	; (8001d50 <__NVIC_SetPriority+0x4c>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	440b      	add	r3, r1
 8001d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d2c:	e00a      	b.n	8001d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4908      	ldr	r1, [pc, #32]	; (8001d54 <__NVIC_SetPriority+0x50>)
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	0112      	lsls	r2, r2, #4
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	440b      	add	r3, r1
 8001d42:	761a      	strb	r2, [r3, #24]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000e100 	.word	0xe000e100
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f1c3 0307 	rsb	r3, r3, #7
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	bf28      	it	cs
 8001d76:	2304      	movcs	r3, #4
 8001d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d902      	bls.n	8001d88 <NVIC_EncodePriority+0x30>
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3b03      	subs	r3, #3
 8001d86:	e000      	b.n	8001d8a <NVIC_EncodePriority+0x32>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43d9      	mvns	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	4313      	orrs	r3, r2
         );
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3724      	adds	r7, #36	; 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd0:	d301      	bcc.n	8001dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00f      	b.n	8001df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <SysTick_Config+0x40>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dde:	210f      	movs	r1, #15
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f7ff ff8e 	bl	8001d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <SysTick_Config+0x40>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <SysTick_Config+0x40>)
 8001df0:	2207      	movs	r2, #7
 8001df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	e000e010 	.word	0xe000e010

08001e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff29 	bl	8001c64 <__NVIC_SetPriorityGrouping>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2c:	f7ff ff3e 	bl	8001cac <__NVIC_GetPriorityGrouping>
 8001e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	6978      	ldr	r0, [r7, #20]
 8001e38:	f7ff ff8e 	bl	8001d58 <NVIC_EncodePriority>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff5d 	bl	8001d04 <__NVIC_SetPriority>
}
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff31 	bl	8001cc8 <__NVIC_EnableIRQ>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff ffa2 	bl	8001dc0 <SysTick_Config>
 8001e7c:	4603      	mov	r3, r0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b087      	sub	sp, #28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e96:	e14e      	b.n	8002136 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 8140 	beq.w	8002130 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d00b      	beq.n	8001ed0 <HAL_GPIO_Init+0x48>
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d007      	beq.n	8001ed0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ec4:	2b11      	cmp	r3, #17
 8001ec6:	d003      	beq.n	8001ed0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b12      	cmp	r3, #18
 8001ece:	d130      	bne.n	8001f32 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	2203      	movs	r2, #3
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f06:	2201      	movs	r2, #1
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4013      	ands	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	f003 0201 	and.w	r2, r3, #1
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	689a      	ldr	r2, [r3, #8]
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0xea>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b12      	cmp	r3, #18
 8001f70:	d123      	bne.n	8001fba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	08da      	lsrs	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3208      	adds	r2, #8
 8001f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	220f      	movs	r2, #15
 8001f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	691a      	ldr	r2, [r3, #16]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	08da      	lsrs	r2, r3, #3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3208      	adds	r2, #8
 8001fb4:	6939      	ldr	r1, [r7, #16]
 8001fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0203 	and.w	r2, r3, #3
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 809a 	beq.w	8002130 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffc:	4b55      	ldr	r3, [pc, #340]	; (8002154 <HAL_GPIO_Init+0x2cc>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	4a54      	ldr	r2, [pc, #336]	; (8002154 <HAL_GPIO_Init+0x2cc>)
 8002002:	f043 0301 	orr.w	r3, r3, #1
 8002006:	6193      	str	r3, [r2, #24]
 8002008:	4b52      	ldr	r3, [pc, #328]	; (8002154 <HAL_GPIO_Init+0x2cc>)
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002014:	4a50      	ldr	r2, [pc, #320]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002020:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	220f      	movs	r2, #15
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800203e:	d013      	beq.n	8002068 <HAL_GPIO_Init+0x1e0>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a46      	ldr	r2, [pc, #280]	; (800215c <HAL_GPIO_Init+0x2d4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d00d      	beq.n	8002064 <HAL_GPIO_Init+0x1dc>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a45      	ldr	r2, [pc, #276]	; (8002160 <HAL_GPIO_Init+0x2d8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d007      	beq.n	8002060 <HAL_GPIO_Init+0x1d8>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a44      	ldr	r2, [pc, #272]	; (8002164 <HAL_GPIO_Init+0x2dc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d101      	bne.n	800205c <HAL_GPIO_Init+0x1d4>
 8002058:	2303      	movs	r3, #3
 800205a:	e006      	b.n	800206a <HAL_GPIO_Init+0x1e2>
 800205c:	2305      	movs	r3, #5
 800205e:	e004      	b.n	800206a <HAL_GPIO_Init+0x1e2>
 8002060:	2302      	movs	r3, #2
 8002062:	e002      	b.n	800206a <HAL_GPIO_Init+0x1e2>
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <HAL_GPIO_Init+0x1e2>
 8002068:	2300      	movs	r3, #0
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	f002 0203 	and.w	r2, r2, #3
 8002070:	0092      	lsls	r2, r2, #2
 8002072:	4093      	lsls	r3, r2
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800207a:	4937      	ldr	r1, [pc, #220]	; (8002158 <HAL_GPIO_Init+0x2d0>)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	089b      	lsrs	r3, r3, #2
 8002080:	3302      	adds	r3, #2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002088:	4b37      	ldr	r3, [pc, #220]	; (8002168 <HAL_GPIO_Init+0x2e0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	43db      	mvns	r3, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	4013      	ands	r3, r2
 8002096:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80020ac:	4a2e      	ldr	r2, [pc, #184]	; (8002168 <HAL_GPIO_Init+0x2e0>)
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020b2:	4b2d      	ldr	r3, [pc, #180]	; (8002168 <HAL_GPIO_Init+0x2e0>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80020d6:	4a24      	ldr	r2, [pc, #144]	; (8002168 <HAL_GPIO_Init+0x2e0>)
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020dc:	4b22      	ldr	r3, [pc, #136]	; (8002168 <HAL_GPIO_Init+0x2e0>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4013      	ands	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002100:	4a19      	ldr	r2, [pc, #100]	; (8002168 <HAL_GPIO_Init+0x2e0>)
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <HAL_GPIO_Init+0x2e0>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	43db      	mvns	r3, r3
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4313      	orrs	r3, r2
 8002128:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800212a:	4a0f      	ldr	r2, [pc, #60]	; (8002168 <HAL_GPIO_Init+0x2e0>)
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	3301      	adds	r3, #1
 8002134:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	fa22 f303 	lsr.w	r3, r2, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	f47f aea9 	bne.w	8001e98 <HAL_GPIO_Init+0x10>
  }
}
 8002146:	bf00      	nop
 8002148:	bf00      	nop
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	40021000 	.word	0x40021000
 8002158:	40010000 	.word	0x40010000
 800215c:	48000400 	.word	0x48000400
 8002160:	48000800 	.word	0x48000800
 8002164:	48000c00 	.word	0x48000c00
 8002168:	40010400 	.word	0x40010400

0800216c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691a      	ldr	r2, [r3, #16]
 800217c:	887b      	ldrh	r3, [r7, #2]
 800217e:	4013      	ands	r3, r2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d002      	beq.n	800218a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002184:	2301      	movs	r3, #1
 8002186:	73fb      	strb	r3, [r7, #15]
 8002188:	e001      	b.n	800218e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800218a:	2300      	movs	r3, #0
 800218c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
 80021a8:	4613      	mov	r3, r2
 80021aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021ac:	787b      	ldrb	r3, [r7, #1]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021b8:	e002      	b.n	80021c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021d8:	695a      	ldr	r2, [r3, #20]
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d006      	beq.n	80021f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021e2:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe fad0 	bl	8000790 <HAL_GPIO_EXTI_Callback>
  }
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40010400 	.word	0x40010400

080021fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002202:	af00      	add	r7, sp, #0
 8002204:	1d3b      	adds	r3, r7, #4
 8002206:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002208:	1d3b      	adds	r3, r7, #4
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d102      	bne.n	8002216 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	f000 bef4 	b.w	8002ffe <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 816a 	beq.w	80024fa <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002226:	4bb3      	ldr	r3, [pc, #716]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b04      	cmp	r3, #4
 8002230:	d00c      	beq.n	800224c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002232:	4bb0      	ldr	r3, [pc, #704]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b08      	cmp	r3, #8
 800223c:	d159      	bne.n	80022f2 <HAL_RCC_OscConfig+0xf6>
 800223e:	4bad      	ldr	r3, [pc, #692]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224a:	d152      	bne.n	80022f2 <HAL_RCC_OscConfig+0xf6>
 800224c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002250:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002260:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	095b      	lsrs	r3, r3, #5
 800226c:	b2db      	uxtb	r3, r3
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	b2db      	uxtb	r3, r3
 8002274:	2b01      	cmp	r3, #1
 8002276:	d102      	bne.n	800227e <HAL_RCC_OscConfig+0x82>
 8002278:	4b9e      	ldr	r3, [pc, #632]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	e015      	b.n	80022aa <HAL_RCC_OscConfig+0xae>
 800227e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002282:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800228a:	fa93 f3a3 	rbit	r3, r3
 800228e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002292:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002296:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800229a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800229e:	fa93 f3a3 	rbit	r3, r3
 80022a2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80022a6:	4b93      	ldr	r3, [pc, #588]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022ae:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80022b2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80022b6:	fa92 f2a2 	rbit	r2, r2
 80022ba:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80022be:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80022c2:	fab2 f282 	clz	r2, r2
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	f042 0220 	orr.w	r2, r2, #32
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	f002 021f 	and.w	r2, r2, #31
 80022d2:	2101      	movs	r1, #1
 80022d4:	fa01 f202 	lsl.w	r2, r1, r2
 80022d8:	4013      	ands	r3, r2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 810c 	beq.w	80024f8 <HAL_RCC_OscConfig+0x2fc>
 80022e0:	1d3b      	adds	r3, r7, #4
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f040 8106 	bne.w	80024f8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	f000 be86 	b.w	8002ffe <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fc:	d106      	bne.n	800230c <HAL_RCC_OscConfig+0x110>
 80022fe:	4b7d      	ldr	r3, [pc, #500]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a7c      	ldr	r2, [pc, #496]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e030      	b.n	800236e <HAL_RCC_OscConfig+0x172>
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0x134>
 8002316:	4b77      	ldr	r3, [pc, #476]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a76      	ldr	r2, [pc, #472]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 800231c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b74      	ldr	r3, [pc, #464]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a73      	ldr	r2, [pc, #460]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 8002328:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e01e      	b.n	800236e <HAL_RCC_OscConfig+0x172>
 8002330:	1d3b      	adds	r3, r7, #4
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800233a:	d10c      	bne.n	8002356 <HAL_RCC_OscConfig+0x15a>
 800233c:	4b6d      	ldr	r3, [pc, #436]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a6c      	ldr	r2, [pc, #432]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 8002342:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b6a      	ldr	r3, [pc, #424]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a69      	ldr	r2, [pc, #420]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 800234e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	e00b      	b.n	800236e <HAL_RCC_OscConfig+0x172>
 8002356:	4b67      	ldr	r3, [pc, #412]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a66      	ldr	r2, [pc, #408]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 800235c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
 8002362:	4b64      	ldr	r3, [pc, #400]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a63      	ldr	r2, [pc, #396]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 8002368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800236e:	4b61      	ldr	r3, [pc, #388]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	f023 020f 	bic.w	r2, r3, #15
 8002376:	1d3b      	adds	r3, r7, #4
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	495d      	ldr	r1, [pc, #372]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 800237e:	4313      	orrs	r3, r2
 8002380:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d059      	beq.n	8002440 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238c:	f7fe fcd8 	bl	8000d40 <HAL_GetTick>
 8002390:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002394:	e00a      	b.n	80023ac <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002396:	f7fe fcd3 	bl	8000d40 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d902      	bls.n	80023ac <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	f000 be29 	b.w	8002ffe <HAL_RCC_OscConfig+0xe02>
 80023ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80023c0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c4:	fab3 f383 	clz	r3, r3
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d102      	bne.n	80023de <HAL_RCC_OscConfig+0x1e2>
 80023d8:	4b46      	ldr	r3, [pc, #280]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	e015      	b.n	800240a <HAL_RCC_OscConfig+0x20e>
 80023de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023e2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80023f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023f6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80023fa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80023fe:	fa93 f3a3 	rbit	r3, r3
 8002402:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002406:	4b3b      	ldr	r3, [pc, #236]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800240e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002412:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002416:	fa92 f2a2 	rbit	r2, r2
 800241a:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800241e:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002422:	fab2 f282 	clz	r2, r2
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	f042 0220 	orr.w	r2, r2, #32
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	f002 021f 	and.w	r2, r2, #31
 8002432:	2101      	movs	r1, #1
 8002434:	fa01 f202 	lsl.w	r2, r1, r2
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d0ab      	beq.n	8002396 <HAL_RCC_OscConfig+0x19a>
 800243e:	e05c      	b.n	80024fa <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002440:	f7fe fc7e 	bl	8000d40 <HAL_GetTick>
 8002444:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002448:	e00a      	b.n	8002460 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800244a:	f7fe fc79 	bl	8000d40 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b64      	cmp	r3, #100	; 0x64
 8002458:	d902      	bls.n	8002460 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	f000 bdcf 	b.w	8002ffe <HAL_RCC_OscConfig+0xe02>
 8002460:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002464:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800246c:	fa93 f3a3 	rbit	r3, r3
 8002470:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002474:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	b2db      	uxtb	r3, r3
 800247e:	095b      	lsrs	r3, r3, #5
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b01      	cmp	r3, #1
 800248a:	d102      	bne.n	8002492 <HAL_RCC_OscConfig+0x296>
 800248c:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	e015      	b.n	80024be <HAL_RCC_OscConfig+0x2c2>
 8002492:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002496:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80024a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024aa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80024ae:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <HAL_RCC_OscConfig+0x2f8>)
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024c2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80024c6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80024ca:	fa92 f2a2 	rbit	r2, r2
 80024ce:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80024d2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80024d6:	fab2 f282 	clz	r2, r2
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	f042 0220 	orr.w	r2, r2, #32
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	f002 021f 	and.w	r2, r2, #31
 80024e6:	2101      	movs	r1, #1
 80024e8:	fa01 f202 	lsl.w	r2, r1, r2
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1ab      	bne.n	800244a <HAL_RCC_OscConfig+0x24e>
 80024f2:	e002      	b.n	80024fa <HAL_RCC_OscConfig+0x2fe>
 80024f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 816f 	beq.w	80027e8 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800250a:	4bd0      	ldr	r3, [pc, #832]	; (800284c <HAL_RCC_OscConfig+0x650>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002516:	4bcd      	ldr	r3, [pc, #820]	; (800284c <HAL_RCC_OscConfig+0x650>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 030c 	and.w	r3, r3, #12
 800251e:	2b08      	cmp	r3, #8
 8002520:	d16c      	bne.n	80025fc <HAL_RCC_OscConfig+0x400>
 8002522:	4bca      	ldr	r3, [pc, #808]	; (800284c <HAL_RCC_OscConfig+0x650>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d166      	bne.n	80025fc <HAL_RCC_OscConfig+0x400>
 800252e:	2302      	movs	r3, #2
 8002530:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002538:	fa93 f3a3 	rbit	r3, r3
 800253c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002540:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	b2db      	uxtb	r3, r3
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	b2db      	uxtb	r3, r3
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b01      	cmp	r3, #1
 8002556:	d102      	bne.n	800255e <HAL_RCC_OscConfig+0x362>
 8002558:	4bbc      	ldr	r3, [pc, #752]	; (800284c <HAL_RCC_OscConfig+0x650>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	e013      	b.n	8002586 <HAL_RCC_OscConfig+0x38a>
 800255e:	2302      	movs	r3, #2
 8002560:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002568:	fa93 f3a3 	rbit	r3, r3
 800256c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002570:	2302      	movs	r3, #2
 8002572:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002576:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800257a:	fa93 f3a3 	rbit	r3, r3
 800257e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002582:	4bb2      	ldr	r3, [pc, #712]	; (800284c <HAL_RCC_OscConfig+0x650>)
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	2202      	movs	r2, #2
 8002588:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800258c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002590:	fa92 f2a2 	rbit	r2, r2
 8002594:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002598:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800259c:	fab2 f282 	clz	r2, r2
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	f042 0220 	orr.w	r2, r2, #32
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	f002 021f 	and.w	r2, r2, #31
 80025ac:	2101      	movs	r1, #1
 80025ae:	fa01 f202 	lsl.w	r2, r1, r2
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d007      	beq.n	80025c8 <HAL_RCC_OscConfig+0x3cc>
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d002      	beq.n	80025c8 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	f000 bd1b 	b.w	8002ffe <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c8:	4ba0      	ldr	r3, [pc, #640]	; (800284c <HAL_RCC_OscConfig+0x650>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	21f8      	movs	r1, #248	; 0xf8
 80025d8:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80025e0:	fa91 f1a1 	rbit	r1, r1
 80025e4:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80025e8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80025ec:	fab1 f181 	clz	r1, r1
 80025f0:	b2c9      	uxtb	r1, r1
 80025f2:	408b      	lsls	r3, r1
 80025f4:	4995      	ldr	r1, [pc, #596]	; (800284c <HAL_RCC_OscConfig+0x650>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	e0f5      	b.n	80027e8 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 8085 	beq.w	8002712 <HAL_RCC_OscConfig+0x516>
 8002608:	2301      	movs	r3, #1
 800260a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800261a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800261e:	fab3 f383 	clz	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002628:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	461a      	mov	r2, r3
 8002630:	2301      	movs	r3, #1
 8002632:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7fe fb84 	bl	8000d40 <HAL_GetTick>
 8002638:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263c:	e00a      	b.n	8002654 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800263e:	f7fe fb7f 	bl	8000d40 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d902      	bls.n	8002654 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	f000 bcd5 	b.w	8002ffe <HAL_RCC_OscConfig+0xe02>
 8002654:	2302      	movs	r3, #2
 8002656:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800265a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800265e:	fa93 f3a3 	rbit	r3, r3
 8002662:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002666:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d102      	bne.n	8002684 <HAL_RCC_OscConfig+0x488>
 800267e:	4b73      	ldr	r3, [pc, #460]	; (800284c <HAL_RCC_OscConfig+0x650>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	e013      	b.n	80026ac <HAL_RCC_OscConfig+0x4b0>
 8002684:	2302      	movs	r3, #2
 8002686:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800268e:	fa93 f3a3 	rbit	r3, r3
 8002692:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002696:	2302      	movs	r3, #2
 8002698:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800269c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80026a0:	fa93 f3a3 	rbit	r3, r3
 80026a4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80026a8:	4b68      	ldr	r3, [pc, #416]	; (800284c <HAL_RCC_OscConfig+0x650>)
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	2202      	movs	r2, #2
 80026ae:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80026b2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80026b6:	fa92 f2a2 	rbit	r2, r2
 80026ba:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80026be:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80026c2:	fab2 f282 	clz	r2, r2
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	f042 0220 	orr.w	r2, r2, #32
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	f002 021f 	and.w	r2, r2, #31
 80026d2:	2101      	movs	r1, #1
 80026d4:	fa01 f202 	lsl.w	r2, r1, r2
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d0af      	beq.n	800263e <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026de:	4b5b      	ldr	r3, [pc, #364]	; (800284c <HAL_RCC_OscConfig+0x650>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e6:	1d3b      	adds	r3, r7, #4
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	21f8      	movs	r1, #248	; 0xf8
 80026ee:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80026f6:	fa91 f1a1 	rbit	r1, r1
 80026fa:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80026fe:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002702:	fab1 f181 	clz	r1, r1
 8002706:	b2c9      	uxtb	r1, r1
 8002708:	408b      	lsls	r3, r1
 800270a:	4950      	ldr	r1, [pc, #320]	; (800284c <HAL_RCC_OscConfig+0x650>)
 800270c:	4313      	orrs	r3, r2
 800270e:	600b      	str	r3, [r1, #0]
 8002710:	e06a      	b.n	80027e8 <HAL_RCC_OscConfig+0x5ec>
 8002712:	2301      	movs	r3, #1
 8002714:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800271c:	fa93 f3a3 	rbit	r3, r3
 8002720:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002724:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002732:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	461a      	mov	r2, r3
 800273a:	2300      	movs	r3, #0
 800273c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273e:	f7fe faff 	bl	8000d40 <HAL_GetTick>
 8002742:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002746:	e00a      	b.n	800275e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002748:	f7fe fafa 	bl	8000d40 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d902      	bls.n	800275e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	f000 bc50 	b.w	8002ffe <HAL_RCC_OscConfig+0xe02>
 800275e:	2302      	movs	r3, #2
 8002760:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002768:	fa93 f3a3 	rbit	r3, r3
 800276c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	b2db      	uxtb	r3, r3
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b01      	cmp	r3, #1
 8002786:	d102      	bne.n	800278e <HAL_RCC_OscConfig+0x592>
 8002788:	4b30      	ldr	r3, [pc, #192]	; (800284c <HAL_RCC_OscConfig+0x650>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	e013      	b.n	80027b6 <HAL_RCC_OscConfig+0x5ba>
 800278e:	2302      	movs	r3, #2
 8002790:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80027a0:	2302      	movs	r3, #2
 80027a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80027a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80027aa:	fa93 f3a3 	rbit	r3, r3
 80027ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80027b2:	4b26      	ldr	r3, [pc, #152]	; (800284c <HAL_RCC_OscConfig+0x650>)
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	2202      	movs	r2, #2
 80027b8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80027bc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80027c0:	fa92 f2a2 	rbit	r2, r2
 80027c4:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80027c8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80027cc:	fab2 f282 	clz	r2, r2
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	f042 0220 	orr.w	r2, r2, #32
 80027d6:	b2d2      	uxtb	r2, r2
 80027d8:	f002 021f 	and.w	r2, r2, #31
 80027dc:	2101      	movs	r1, #1
 80027de:	fa01 f202 	lsl.w	r2, r1, r2
 80027e2:	4013      	ands	r3, r2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1af      	bne.n	8002748 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 80da 	beq.w	80029ac <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027f8:	1d3b      	adds	r3, r7, #4
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d069      	beq.n	80028d6 <HAL_RCC_OscConfig+0x6da>
 8002802:	2301      	movs	r3, #1
 8002804:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002808:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002814:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002818:	fab3 f383 	clz	r3, r3
 800281c:	b2db      	uxtb	r3, r3
 800281e:	461a      	mov	r2, r3
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_RCC_OscConfig+0x654>)
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	461a      	mov	r2, r3
 8002828:	2301      	movs	r3, #1
 800282a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282c:	f7fe fa88 	bl	8000d40 <HAL_GetTick>
 8002830:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002834:	e00e      	b.n	8002854 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002836:	f7fe fa83 	bl	8000d40 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d906      	bls.n	8002854 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e3d9      	b.n	8002ffe <HAL_RCC_OscConfig+0xe02>
 800284a:	bf00      	nop
 800284c:	40021000 	.word	0x40021000
 8002850:	10908120 	.word	0x10908120
 8002854:	2302      	movs	r3, #2
 8002856:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002866:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800286a:	2202      	movs	r2, #2
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	fa93 f2a3 	rbit	r2, r3
 8002878:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002882:	2202      	movs	r2, #2
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	fa93 f2a3 	rbit	r2, r3
 8002890:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002894:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	4ba5      	ldr	r3, [pc, #660]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 8002898:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800289a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800289e:	2102      	movs	r1, #2
 80028a0:	6019      	str	r1, [r3, #0]
 80028a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	fa93 f1a3 	rbit	r1, r3
 80028ac:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028b0:	6019      	str	r1, [r3, #0]
  return result;
 80028b2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	fab3 f383 	clz	r3, r3
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	2101      	movs	r1, #1
 80028ca:	fa01 f303 	lsl.w	r3, r1, r3
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0b0      	beq.n	8002836 <HAL_RCC_OscConfig+0x63a>
 80028d4:	e06a      	b.n	80029ac <HAL_RCC_OscConfig+0x7b0>
 80028d6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80028da:	2201      	movs	r2, #1
 80028dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	fa93 f2a3 	rbit	r2, r3
 80028e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028ec:	601a      	str	r2, [r3, #0]
  return result;
 80028ee:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028f2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	461a      	mov	r2, r3
 80028fc:	4b8c      	ldr	r3, [pc, #560]	; (8002b30 <HAL_RCC_OscConfig+0x934>)
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	461a      	mov	r2, r3
 8002904:	2300      	movs	r3, #0
 8002906:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002908:	f7fe fa1a 	bl	8000d40 <HAL_GetTick>
 800290c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002910:	e009      	b.n	8002926 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002912:	f7fe fa15 	bl	8000d40 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e36b      	b.n	8002ffe <HAL_RCC_OscConfig+0xe02>
 8002926:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800292a:	2202      	movs	r2, #2
 800292c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	fa93 f2a3 	rbit	r2, r3
 8002938:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002942:	2202      	movs	r2, #2
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	fa93 f2a3 	rbit	r2, r3
 8002950:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800295a:	2202      	movs	r2, #2
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	fa93 f2a3 	rbit	r2, r3
 8002968:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800296c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296e:	4b6f      	ldr	r3, [pc, #444]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 8002970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002972:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002976:	2102      	movs	r1, #2
 8002978:	6019      	str	r1, [r3, #0]
 800297a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	fa93 f1a3 	rbit	r1, r3
 8002984:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002988:	6019      	str	r1, [r3, #0]
  return result;
 800298a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	fab3 f383 	clz	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800299a:	b2db      	uxtb	r3, r3
 800299c:	f003 031f 	and.w	r3, r3, #31
 80029a0:	2101      	movs	r1, #1
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1b2      	bne.n	8002912 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0304 	and.w	r3, r3, #4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 8158 	beq.w	8002c6c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029bc:	2300      	movs	r3, #0
 80029be:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029c2:	4b5a      	ldr	r3, [pc, #360]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d112      	bne.n	80029f4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ce:	4b57      	ldr	r3, [pc, #348]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	4a56      	ldr	r2, [pc, #344]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 80029d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d8:	61d3      	str	r3, [r2, #28]
 80029da:	4b54      	ldr	r3, [pc, #336]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80029e2:	f107 0308 	add.w	r3, r7, #8
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	f107 0308 	add.w	r3, r7, #8
 80029ec:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80029ee:	2301      	movs	r3, #1
 80029f0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029f4:	4b4f      	ldr	r3, [pc, #316]	; (8002b34 <HAL_RCC_OscConfig+0x938>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d11a      	bne.n	8002a36 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a00:	4b4c      	ldr	r3, [pc, #304]	; (8002b34 <HAL_RCC_OscConfig+0x938>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a4b      	ldr	r2, [pc, #300]	; (8002b34 <HAL_RCC_OscConfig+0x938>)
 8002a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a0a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a0c:	f7fe f998 	bl	8000d40 <HAL_GetTick>
 8002a10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a14:	e009      	b.n	8002a2a <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a16:	f7fe f993 	bl	8000d40 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	; 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e2e9      	b.n	8002ffe <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2a:	4b42      	ldr	r3, [pc, #264]	; (8002b34 <HAL_RCC_OscConfig+0x938>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0ef      	beq.n	8002a16 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a36:	1d3b      	adds	r3, r7, #4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x852>
 8002a40:	4b3a      	ldr	r3, [pc, #232]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	4a39      	ldr	r2, [pc, #228]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6213      	str	r3, [r2, #32]
 8002a4c:	e02f      	b.n	8002aae <HAL_RCC_OscConfig+0x8b2>
 8002a4e:	1d3b      	adds	r3, r7, #4
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10c      	bne.n	8002a72 <HAL_RCC_OscConfig+0x876>
 8002a58:	4b34      	ldr	r3, [pc, #208]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	4a33      	ldr	r2, [pc, #204]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	6213      	str	r3, [r2, #32]
 8002a64:	4b31      	ldr	r3, [pc, #196]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	4a30      	ldr	r2, [pc, #192]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 8002a6a:	f023 0304 	bic.w	r3, r3, #4
 8002a6e:	6213      	str	r3, [r2, #32]
 8002a70:	e01d      	b.n	8002aae <HAL_RCC_OscConfig+0x8b2>
 8002a72:	1d3b      	adds	r3, r7, #4
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	2b05      	cmp	r3, #5
 8002a7a:	d10c      	bne.n	8002a96 <HAL_RCC_OscConfig+0x89a>
 8002a7c:	4b2b      	ldr	r3, [pc, #172]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	4a2a      	ldr	r2, [pc, #168]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 8002a82:	f043 0304 	orr.w	r3, r3, #4
 8002a86:	6213      	str	r3, [r2, #32]
 8002a88:	4b28      	ldr	r3, [pc, #160]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 8002a8a:	6a1b      	ldr	r3, [r3, #32]
 8002a8c:	4a27      	ldr	r2, [pc, #156]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 8002a8e:	f043 0301 	orr.w	r3, r3, #1
 8002a92:	6213      	str	r3, [r2, #32]
 8002a94:	e00b      	b.n	8002aae <HAL_RCC_OscConfig+0x8b2>
 8002a96:	4b25      	ldr	r3, [pc, #148]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	4a24      	ldr	r2, [pc, #144]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 8002a9c:	f023 0301 	bic.w	r3, r3, #1
 8002aa0:	6213      	str	r3, [r2, #32]
 8002aa2:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	4a21      	ldr	r2, [pc, #132]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 8002aa8:	f023 0304 	bic.w	r3, r3, #4
 8002aac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d06b      	beq.n	8002b90 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab8:	f7fe f942 	bl	8000d40 <HAL_GetTick>
 8002abc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac0:	e00b      	b.n	8002ada <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac2:	f7fe f93d 	bl	8000d40 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e291      	b.n	8002ffe <HAL_RCC_OscConfig+0xe02>
 8002ada:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ade:	2202      	movs	r2, #2
 8002ae0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	fa93 f2a3 	rbit	r2, r3
 8002aec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002af6:	2202      	movs	r2, #2
 8002af8:	601a      	str	r2, [r3, #0]
 8002afa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	fa93 f2a3 	rbit	r2, r3
 8002b04:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b08:	601a      	str	r2, [r3, #0]
  return result;
 8002b0a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002b0e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b10:	fab3 f383 	clz	r3, r3
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	f043 0302 	orr.w	r3, r3, #2
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d109      	bne.n	8002b38 <HAL_RCC_OscConfig+0x93c>
 8002b24:	4b01      	ldr	r3, [pc, #4]	; (8002b2c <HAL_RCC_OscConfig+0x930>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	e014      	b.n	8002b54 <HAL_RCC_OscConfig+0x958>
 8002b2a:	bf00      	nop
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	10908120 	.word	0x10908120
 8002b34:	40007000 	.word	0x40007000
 8002b38:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b40:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	fa93 f2a3 	rbit	r2, r3
 8002b4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	4bbb      	ldr	r3, [pc, #748]	; (8002e40 <HAL_RCC_OscConfig+0xc44>)
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002b58:	2102      	movs	r1, #2
 8002b5a:	6011      	str	r1, [r2, #0]
 8002b5c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	fa92 f1a2 	rbit	r1, r2
 8002b66:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002b6a:	6011      	str	r1, [r2, #0]
  return result;
 8002b6c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	fab2 f282 	clz	r2, r2
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	f002 021f 	and.w	r2, r2, #31
 8002b82:	2101      	movs	r1, #1
 8002b84:	fa01 f202 	lsl.w	r2, r1, r2
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d099      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x8c6>
 8002b8e:	e063      	b.n	8002c58 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b90:	f7fe f8d6 	bl	8000d40 <HAL_GetTick>
 8002b94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b98:	e00b      	b.n	8002bb2 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7fe f8d1 	bl	8000d40 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e225      	b.n	8002ffe <HAL_RCC_OscConfig+0xe02>
 8002bb2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	fa93 f2a3 	rbit	r2, r3
 8002bc4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002bce:	2202      	movs	r2, #2
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	fa93 f2a3 	rbit	r2, r3
 8002bdc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002be0:	601a      	str	r2, [r3, #0]
  return result;
 8002be2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002be6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	095b      	lsrs	r3, r3, #5
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f043 0302 	orr.w	r3, r3, #2
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d102      	bne.n	8002c02 <HAL_RCC_OscConfig+0xa06>
 8002bfc:	4b90      	ldr	r3, [pc, #576]	; (8002e40 <HAL_RCC_OscConfig+0xc44>)
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	e00d      	b.n	8002c1e <HAL_RCC_OscConfig+0xa22>
 8002c02:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c06:	2202      	movs	r2, #2
 8002c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	fa93 f2a3 	rbit	r2, r3
 8002c14:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	4b89      	ldr	r3, [pc, #548]	; (8002e40 <HAL_RCC_OscConfig+0xc44>)
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c22:	2102      	movs	r1, #2
 8002c24:	6011      	str	r1, [r2, #0]
 8002c26:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	fa92 f1a2 	rbit	r1, r2
 8002c30:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c34:	6011      	str	r1, [r2, #0]
  return result;
 8002c36:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c3a:	6812      	ldr	r2, [r2, #0]
 8002c3c:	fab2 f282 	clz	r2, r2
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	f002 021f 	and.w	r2, r2, #31
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1a0      	bne.n	8002b9a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c58:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d105      	bne.n	8002c6c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c60:	4b77      	ldr	r3, [pc, #476]	; (8002e40 <HAL_RCC_OscConfig+0xc44>)
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	4a76      	ldr	r2, [pc, #472]	; (8002e40 <HAL_RCC_OscConfig+0xc44>)
 8002c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 81c2 	beq.w	8002ffc <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c78:	4b71      	ldr	r3, [pc, #452]	; (8002e40 <HAL_RCC_OscConfig+0xc44>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	f000 819c 	beq.w	8002fbe <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c86:	1d3b      	adds	r3, r7, #4
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	f040 8114 	bne.w	8002eba <HAL_RCC_OscConfig+0xcbe>
 8002c92:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002c96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	fa93 f2a3 	rbit	r2, r3
 8002ca6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002caa:	601a      	str	r2, [r3, #0]
  return result;
 8002cac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002cb0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002cbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc8:	f7fe f83a 	bl	8000d40 <HAL_GetTick>
 8002ccc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cd0:	e009      	b.n	8002ce6 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd2:	f7fe f835 	bl	8000d40 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e18b      	b.n	8002ffe <HAL_RCC_OscConfig+0xe02>
 8002ce6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002cea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	fa93 f2a3 	rbit	r2, r3
 8002cfa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002cfe:	601a      	str	r2, [r3, #0]
  return result;
 8002d00:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002d04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	095b      	lsrs	r3, r3, #5
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d102      	bne.n	8002d20 <HAL_RCC_OscConfig+0xb24>
 8002d1a:	4b49      	ldr	r3, [pc, #292]	; (8002e40 <HAL_RCC_OscConfig+0xc44>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	e01b      	b.n	8002d58 <HAL_RCC_OscConfig+0xb5c>
 8002d20:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	fa93 f2a3 	rbit	r2, r3
 8002d34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	fa93 f2a3 	rbit	r2, r3
 8002d4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	4b3a      	ldr	r3, [pc, #232]	; (8002e40 <HAL_RCC_OscConfig+0xc44>)
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d60:	6011      	str	r1, [r2, #0]
 8002d62:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	fa92 f1a2 	rbit	r1, r2
 8002d6c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002d70:	6011      	str	r1, [r2, #0]
  return result;
 8002d72:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	fab2 f282 	clz	r2, r2
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	f042 0220 	orr.w	r2, r2, #32
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	f002 021f 	and.w	r2, r2, #31
 8002d88:	2101      	movs	r1, #1
 8002d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d19e      	bne.n	8002cd2 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d94:	4b2a      	ldr	r3, [pc, #168]	; (8002e40 <HAL_RCC_OscConfig+0xc44>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d9c:	1d3b      	adds	r3, r7, #4
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	4925      	ldr	r1, [pc, #148]	; (8002e40 <HAL_RCC_OscConfig+0xc44>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
 8002db0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002db4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002db8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	fa93 f2a3 	rbit	r2, r3
 8002dc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002dc8:	601a      	str	r2, [r3, #0]
  return result;
 8002dca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002dce:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd0:	fab3 f383 	clz	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dda:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	461a      	mov	r2, r3
 8002de2:	2301      	movs	r3, #1
 8002de4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de6:	f7fd ffab 	bl	8000d40 <HAL_GetTick>
 8002dea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dee:	e009      	b.n	8002e04 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df0:	f7fd ffa6 	bl	8000d40 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e0fc      	b.n	8002ffe <HAL_RCC_OscConfig+0xe02>
 8002e04:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	fa93 f2a3 	rbit	r2, r3
 8002e18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e1c:	601a      	str	r2, [r3, #0]
  return result;
 8002e1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002e22:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e24:	fab3 f383 	clz	r3, r3
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d105      	bne.n	8002e44 <HAL_RCC_OscConfig+0xc48>
 8002e38:	4b01      	ldr	r3, [pc, #4]	; (8002e40 <HAL_RCC_OscConfig+0xc44>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	e01e      	b.n	8002e7c <HAL_RCC_OscConfig+0xc80>
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	fa93 f2a3 	rbit	r2, r3
 8002e58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	fa93 f2a3 	rbit	r2, r3
 8002e72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	4b63      	ldr	r3, [pc, #396]	; (8003008 <HAL_RCC_OscConfig+0xe0c>)
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e84:	6011      	str	r1, [r2, #0]
 8002e86:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	fa92 f1a2 	rbit	r1, r2
 8002e90:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002e94:	6011      	str	r1, [r2, #0]
  return result;
 8002e96:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	fab2 f282 	clz	r2, r2
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	f042 0220 	orr.w	r2, r2, #32
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	f002 021f 	and.w	r2, r2, #31
 8002eac:	2101      	movs	r1, #1
 8002eae:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d09b      	beq.n	8002df0 <HAL_RCC_OscConfig+0xbf4>
 8002eb8:	e0a0      	b.n	8002ffc <HAL_RCC_OscConfig+0xe00>
 8002eba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ebe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ec2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	fa93 f2a3 	rbit	r2, r3
 8002ece:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ed2:	601a      	str	r2, [r3, #0]
  return result;
 8002ed4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ed8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eda:	fab3 f383 	clz	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ee4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	461a      	mov	r2, r3
 8002eec:	2300      	movs	r3, #0
 8002eee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7fd ff26 	bl	8000d40 <HAL_GetTick>
 8002ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef8:	e009      	b.n	8002f0e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002efa:	f7fd ff21 	bl	8000d40 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e077      	b.n	8002ffe <HAL_RCC_OscConfig+0xe02>
 8002f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	fa93 f2a3 	rbit	r2, r3
 8002f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f26:	601a      	str	r2, [r3, #0]
  return result;
 8002f28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f2e:	fab3 f383 	clz	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	095b      	lsrs	r3, r3, #5
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d102      	bne.n	8002f48 <HAL_RCC_OscConfig+0xd4c>
 8002f42:	4b31      	ldr	r3, [pc, #196]	; (8003008 <HAL_RCC_OscConfig+0xe0c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	e01b      	b.n	8002f80 <HAL_RCC_OscConfig+0xd84>
 8002f48:	f107 0320 	add.w	r3, r7, #32
 8002f4c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	f107 0320 	add.w	r3, r7, #32
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	fa93 f2a3 	rbit	r2, r3
 8002f5c:	f107 031c 	add.w	r3, r7, #28
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	f107 0318 	add.w	r3, r7, #24
 8002f66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	f107 0318 	add.w	r3, r7, #24
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	fa93 f2a3 	rbit	r2, r3
 8002f76:	f107 0314 	add.w	r3, r7, #20
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	4b22      	ldr	r3, [pc, #136]	; (8003008 <HAL_RCC_OscConfig+0xe0c>)
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	f107 0210 	add.w	r2, r7, #16
 8002f84:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f88:	6011      	str	r1, [r2, #0]
 8002f8a:	f107 0210 	add.w	r2, r7, #16
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	fa92 f1a2 	rbit	r1, r2
 8002f94:	f107 020c 	add.w	r2, r7, #12
 8002f98:	6011      	str	r1, [r2, #0]
  return result;
 8002f9a:	f107 020c 	add.w	r2, r7, #12
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	fab2 f282 	clz	r2, r2
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	f042 0220 	orr.w	r2, r2, #32
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	f002 021f 	and.w	r2, r2, #31
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d19e      	bne.n	8002efa <HAL_RCC_OscConfig+0xcfe>
 8002fbc:	e01e      	b.n	8002ffc <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fbe:	1d3b      	adds	r3, r7, #4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e018      	b.n	8002ffe <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fcc:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <HAL_RCC_OscConfig+0xe0c>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002fd4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002fd8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d108      	bne.n	8002ff8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002fe6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002fea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fee:	1d3b      	adds	r3, r7, #4
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40021000 	.word	0x40021000

0800300c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b09e      	sub	sp, #120	; 0x78
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e162      	b.n	80032ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003024:	4b90      	ldr	r3, [pc, #576]	; (8003268 <HAL_RCC_ClockConfig+0x25c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d910      	bls.n	8003054 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003032:	4b8d      	ldr	r3, [pc, #564]	; (8003268 <HAL_RCC_ClockConfig+0x25c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 0207 	bic.w	r2, r3, #7
 800303a:	498b      	ldr	r1, [pc, #556]	; (8003268 <HAL_RCC_ClockConfig+0x25c>)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	4313      	orrs	r3, r2
 8003040:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003042:	4b89      	ldr	r3, [pc, #548]	; (8003268 <HAL_RCC_ClockConfig+0x25c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0307 	and.w	r3, r3, #7
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d001      	beq.n	8003054 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e14a      	b.n	80032ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d008      	beq.n	8003072 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003060:	4b82      	ldr	r3, [pc, #520]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	497f      	ldr	r1, [pc, #508]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 800306e:	4313      	orrs	r3, r2
 8003070:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 80dc 	beq.w	8003238 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d13c      	bne.n	8003102 <HAL_RCC_ClockConfig+0xf6>
 8003088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800308c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003090:	fa93 f3a3 	rbit	r3, r3
 8003094:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003098:	fab3 f383 	clz	r3, r3
 800309c:	b2db      	uxtb	r3, r3
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f043 0301 	orr.w	r3, r3, #1
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d102      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xa6>
 80030ac:	4b6f      	ldr	r3, [pc, #444]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	e00f      	b.n	80030d2 <HAL_RCC_ClockConfig+0xc6>
 80030b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030b6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	667b      	str	r3, [r7, #100]	; 0x64
 80030c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030c4:	663b      	str	r3, [r7, #96]	; 0x60
 80030c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030c8:	fa93 f3a3 	rbit	r3, r3
 80030cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030ce:	4b67      	ldr	r3, [pc, #412]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030d6:	65ba      	str	r2, [r7, #88]	; 0x58
 80030d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030da:	fa92 f2a2 	rbit	r2, r2
 80030de:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80030e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80030e2:	fab2 f282 	clz	r2, r2
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	f042 0220 	orr.w	r2, r2, #32
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	f002 021f 	and.w	r2, r2, #31
 80030f2:	2101      	movs	r1, #1
 80030f4:	fa01 f202 	lsl.w	r2, r1, r2
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d17b      	bne.n	80031f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0f3      	b.n	80032ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d13c      	bne.n	8003184 <HAL_RCC_ClockConfig+0x178>
 800310a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800310e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311a:	fab3 f383 	clz	r3, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	095b      	lsrs	r3, r3, #5
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d102      	bne.n	8003134 <HAL_RCC_ClockConfig+0x128>
 800312e:	4b4f      	ldr	r3, [pc, #316]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	e00f      	b.n	8003154 <HAL_RCC_ClockConfig+0x148>
 8003134:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003138:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800313c:	fa93 f3a3 	rbit	r3, r3
 8003140:	647b      	str	r3, [r7, #68]	; 0x44
 8003142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003146:	643b      	str	r3, [r7, #64]	; 0x40
 8003148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800314a:	fa93 f3a3 	rbit	r3, r3
 800314e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003150:	4b46      	ldr	r3, [pc, #280]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003158:	63ba      	str	r2, [r7, #56]	; 0x38
 800315a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800315c:	fa92 f2a2 	rbit	r2, r2
 8003160:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003164:	fab2 f282 	clz	r2, r2
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	f042 0220 	orr.w	r2, r2, #32
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	f002 021f 	and.w	r2, r2, #31
 8003174:	2101      	movs	r1, #1
 8003176:	fa01 f202 	lsl.w	r2, r1, r2
 800317a:	4013      	ands	r3, r2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d13a      	bne.n	80031f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0b2      	b.n	80032ea <HAL_RCC_ClockConfig+0x2de>
 8003184:	2302      	movs	r3, #2
 8003186:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318a:	fa93 f3a3 	rbit	r3, r3
 800318e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003192:	fab3 f383 	clz	r3, r3
 8003196:	b2db      	uxtb	r3, r3
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	b2db      	uxtb	r3, r3
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d102      	bne.n	80031ac <HAL_RCC_ClockConfig+0x1a0>
 80031a6:	4b31      	ldr	r3, [pc, #196]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	e00d      	b.n	80031c8 <HAL_RCC_ClockConfig+0x1bc>
 80031ac:	2302      	movs	r3, #2
 80031ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b2:	fa93 f3a3 	rbit	r3, r3
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
 80031b8:	2302      	movs	r3, #2
 80031ba:	623b      	str	r3, [r7, #32]
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	fa93 f3a3 	rbit	r3, r3
 80031c2:	61fb      	str	r3, [r7, #28]
 80031c4:	4b29      	ldr	r3, [pc, #164]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	2202      	movs	r2, #2
 80031ca:	61ba      	str	r2, [r7, #24]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	fa92 f2a2 	rbit	r2, r2
 80031d2:	617a      	str	r2, [r7, #20]
  return result;
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	fab2 f282 	clz	r2, r2
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	f042 0220 	orr.w	r2, r2, #32
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	f002 021f 	and.w	r2, r2, #31
 80031e6:	2101      	movs	r1, #1
 80031e8:	fa01 f202 	lsl.w	r2, r1, r2
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e079      	b.n	80032ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031f6:	4b1d      	ldr	r3, [pc, #116]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f023 0203 	bic.w	r2, r3, #3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	491a      	ldr	r1, [pc, #104]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 8003204:	4313      	orrs	r3, r2
 8003206:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003208:	f7fd fd9a 	bl	8000d40 <HAL_GetTick>
 800320c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320e:	e00a      	b.n	8003226 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003210:	f7fd fd96 	bl	8000d40 <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	f241 3288 	movw	r2, #5000	; 0x1388
 800321e:	4293      	cmp	r3, r2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e061      	b.n	80032ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003226:	4b11      	ldr	r3, [pc, #68]	; (800326c <HAL_RCC_ClockConfig+0x260>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 020c 	and.w	r2, r3, #12
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	429a      	cmp	r2, r3
 8003236:	d1eb      	bne.n	8003210 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_RCC_ClockConfig+0x25c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d214      	bcs.n	8003270 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b08      	ldr	r3, [pc, #32]	; (8003268 <HAL_RCC_ClockConfig+0x25c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 0207 	bic.w	r2, r3, #7
 800324e:	4906      	ldr	r1, [pc, #24]	; (8003268 <HAL_RCC_ClockConfig+0x25c>)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	4313      	orrs	r3, r2
 8003254:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003256:	4b04      	ldr	r3, [pc, #16]	; (8003268 <HAL_RCC_ClockConfig+0x25c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0307 	and.w	r3, r3, #7
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	429a      	cmp	r2, r3
 8003262:	d005      	beq.n	8003270 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e040      	b.n	80032ea <HAL_RCC_ClockConfig+0x2de>
 8003268:	40022000 	.word	0x40022000
 800326c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <HAL_RCC_ClockConfig+0x2e8>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	491a      	ldr	r1, [pc, #104]	; (80032f4 <HAL_RCC_ClockConfig+0x2e8>)
 800328a:	4313      	orrs	r3, r2
 800328c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d009      	beq.n	80032ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800329a:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <HAL_RCC_ClockConfig+0x2e8>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	4912      	ldr	r1, [pc, #72]	; (80032f4 <HAL_RCC_ClockConfig+0x2e8>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032ae:	f000 f829 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032b2:	4601      	mov	r1, r0
 80032b4:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <HAL_RCC_ClockConfig+0x2e8>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032bc:	22f0      	movs	r2, #240	; 0xf0
 80032be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	fa92 f2a2 	rbit	r2, r2
 80032c6:	60fa      	str	r2, [r7, #12]
  return result;
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	fab2 f282 	clz	r2, r2
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	40d3      	lsrs	r3, r2
 80032d2:	4a09      	ldr	r2, [pc, #36]	; (80032f8 <HAL_RCC_ClockConfig+0x2ec>)
 80032d4:	5cd3      	ldrb	r3, [r2, r3]
 80032d6:	fa21 f303 	lsr.w	r3, r1, r3
 80032da:	4a08      	ldr	r2, [pc, #32]	; (80032fc <HAL_RCC_ClockConfig+0x2f0>)
 80032dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80032de:	4b08      	ldr	r3, [pc, #32]	; (8003300 <HAL_RCC_ClockConfig+0x2f4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd fce8 	bl	8000cb8 <HAL_InitTick>
  
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3778      	adds	r7, #120	; 0x78
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40021000 	.word	0x40021000
 80032f8:	08005b24 	.word	0x08005b24
 80032fc:	20000004 	.word	0x20000004
 8003300:	20000008 	.word	0x20000008

08003304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	b480      	push	{r7}
 8003306:	b08b      	sub	sp, #44	; 0x2c
 8003308:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
 800330e:	2300      	movs	r3, #0
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	2300      	movs	r3, #0
 8003314:	627b      	str	r3, [r7, #36]	; 0x24
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800331e:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b04      	cmp	r3, #4
 800332c:	d002      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0x30>
 800332e:	2b08      	cmp	r3, #8
 8003330:	d003      	beq.n	800333a <HAL_RCC_GetSysClockFreq+0x36>
 8003332:	e03c      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003334:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003336:	623b      	str	r3, [r7, #32]
      break;
 8003338:	e03c      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003340:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003344:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003346:	68ba      	ldr	r2, [r7, #8]
 8003348:	fa92 f2a2 	rbit	r2, r2
 800334c:	607a      	str	r2, [r7, #4]
  return result;
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	fab2 f282 	clz	r2, r2
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	40d3      	lsrs	r3, r2
 8003358:	4a1c      	ldr	r2, [pc, #112]	; (80033cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800335a:	5cd3      	ldrb	r3, [r2, r3]
 800335c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800335e:	4b19      	ldr	r3, [pc, #100]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	220f      	movs	r2, #15
 8003368:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	fa92 f2a2 	rbit	r2, r2
 8003370:	60fa      	str	r2, [r7, #12]
  return result;
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	fab2 f282 	clz	r2, r2
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	40d3      	lsrs	r3, r2
 800337c:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800337e:	5cd3      	ldrb	r3, [r2, r3]
 8003380:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800338c:	4a0e      	ldr	r2, [pc, #56]	; (80033c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	fbb2 f2f3 	udiv	r2, r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	fb02 f303 	mul.w	r3, r2, r3
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
 800339c:	e004      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	4a0c      	ldr	r2, [pc, #48]	; (80033d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80033a2:	fb02 f303 	mul.w	r3, r2, r3
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	623b      	str	r3, [r7, #32]
      break;
 80033ac:	e002      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033ae:	4b06      	ldr	r3, [pc, #24]	; (80033c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033b0:	623b      	str	r3, [r7, #32]
      break;
 80033b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033b4:	6a3b      	ldr	r3, [r7, #32]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	372c      	adds	r7, #44	; 0x2c
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000
 80033c8:	007a1200 	.word	0x007a1200
 80033cc:	08005b3c 	.word	0x08005b3c
 80033d0:	08005b4c 	.word	0x08005b4c
 80033d4:	003d0900 	.word	0x003d0900

080033d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033dc:	4b03      	ldr	r3, [pc, #12]	; (80033ec <HAL_RCC_GetHCLKFreq+0x14>)
 80033de:	681b      	ldr	r3, [r3, #0]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	20000004 	.word	0x20000004

080033f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80033f6:	f7ff ffef 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 80033fa:	4601      	mov	r1, r0
 80033fc:	4b0b      	ldr	r3, [pc, #44]	; (800342c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003404:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003408:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	fa92 f2a2 	rbit	r2, r2
 8003410:	603a      	str	r2, [r7, #0]
  return result;
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	fab2 f282 	clz	r2, r2
 8003418:	b2d2      	uxtb	r2, r2
 800341a:	40d3      	lsrs	r3, r2
 800341c:	4a04      	ldr	r2, [pc, #16]	; (8003430 <HAL_RCC_GetPCLK1Freq+0x40>)
 800341e:	5cd3      	ldrb	r3, [r2, r3]
 8003420:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003424:	4618      	mov	r0, r3
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40021000 	.word	0x40021000
 8003430:	08005b34 	.word	0x08005b34

08003434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800343a:	f7ff ffcd 	bl	80033d8 <HAL_RCC_GetHCLKFreq>
 800343e:	4601      	mov	r1, r0
 8003440:	4b0b      	ldr	r3, [pc, #44]	; (8003470 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003448:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800344c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	fa92 f2a2 	rbit	r2, r2
 8003454:	603a      	str	r2, [r7, #0]
  return result;
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	fab2 f282 	clz	r2, r2
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	40d3      	lsrs	r3, r2
 8003460:	4a04      	ldr	r2, [pc, #16]	; (8003474 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003462:	5cd3      	ldrb	r3, [r2, r3]
 8003464:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000
 8003474:	08005b34 	.word	0x08005b34

08003478 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b092      	sub	sp, #72	; 0x48
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003488:	2300      	movs	r3, #0
 800348a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 80cd 	beq.w	8003636 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800349c:	4b86      	ldr	r3, [pc, #536]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10e      	bne.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034a8:	4b83      	ldr	r3, [pc, #524]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	4a82      	ldr	r2, [pc, #520]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b2:	61d3      	str	r3, [r2, #28]
 80034b4:	4b80      	ldr	r3, [pc, #512]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c0:	2301      	movs	r3, #1
 80034c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c6:	4b7d      	ldr	r3, [pc, #500]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d118      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d2:	4b7a      	ldr	r3, [pc, #488]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a79      	ldr	r2, [pc, #484]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80034d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034dc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034de:	f7fd fc2f 	bl	8000d40 <HAL_GetTick>
 80034e2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e4:	e008      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e6:	f7fd fc2b 	bl	8000d40 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b64      	cmp	r3, #100	; 0x64
 80034f2:	d901      	bls.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e0db      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f8:	4b70      	ldr	r3, [pc, #448]	; (80036bc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0f0      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003504:	4b6c      	ldr	r3, [pc, #432]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800350e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003510:	2b00      	cmp	r3, #0
 8003512:	d07d      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800351e:	429a      	cmp	r2, r3
 8003520:	d076      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003522:	4b65      	ldr	r3, [pc, #404]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800352c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003530:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	fa93 f3a3 	rbit	r3, r3
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800353a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800353c:	fab3 f383 	clz	r3, r3
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	4b5e      	ldr	r3, [pc, #376]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	461a      	mov	r2, r3
 800354c:	2301      	movs	r3, #1
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003554:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003558:	fa93 f3a3 	rbit	r3, r3
 800355c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800355e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003560:	fab3 f383 	clz	r3, r3
 8003564:	b2db      	uxtb	r3, r3
 8003566:	461a      	mov	r2, r3
 8003568:	4b55      	ldr	r3, [pc, #340]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	461a      	mov	r2, r3
 8003570:	2300      	movs	r3, #0
 8003572:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003574:	4a50      	ldr	r2, [pc, #320]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003578:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800357a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	d045      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7fd fbdc 	bl	8000d40 <HAL_GetTick>
 8003588:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358a:	e00a      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358c:	f7fd fbd8 	bl	8000d40 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	; 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e086      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80035a2:	2302      	movs	r3, #2
 80035a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	fa93 f3a3 	rbit	r3, r3
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
 80035ae:	2302      	movs	r3, #2
 80035b0:	623b      	str	r3, [r7, #32]
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	fa93 f3a3 	rbit	r3, r3
 80035b8:	61fb      	str	r3, [r7, #28]
  return result;
 80035ba:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035bc:	fab3 f383 	clz	r3, r3
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	f043 0302 	orr.w	r3, r3, #2
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d102      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80035d0:	4b39      	ldr	r3, [pc, #228]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	e007      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80035d6:	2302      	movs	r3, #2
 80035d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	fa93 f3a3 	rbit	r3, r3
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	4b35      	ldr	r3, [pc, #212]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	2202      	movs	r2, #2
 80035e8:	613a      	str	r2, [r7, #16]
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	fa92 f2a2 	rbit	r2, r2
 80035f0:	60fa      	str	r2, [r7, #12]
  return result;
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	fab2 f282 	clz	r2, r2
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035fe:	b2d2      	uxtb	r2, r2
 8003600:	f002 021f 	and.w	r2, r2, #31
 8003604:	2101      	movs	r1, #1
 8003606:	fa01 f202 	lsl.w	r2, r1, r2
 800360a:	4013      	ands	r3, r2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0bd      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003610:	4b29      	ldr	r3, [pc, #164]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	4926      	ldr	r1, [pc, #152]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800361e:	4313      	orrs	r3, r2
 8003620:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003622:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003626:	2b01      	cmp	r3, #1
 8003628:	d105      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362a:	4b23      	ldr	r3, [pc, #140]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	4a22      	ldr	r2, [pc, #136]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003634:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003642:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	f023 0203 	bic.w	r2, r3, #3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	491a      	ldr	r1, [pc, #104]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003650:	4313      	orrs	r3, r2
 8003652:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0320 	and.w	r3, r3, #32
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003660:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003664:	f023 0210 	bic.w	r2, r3, #16
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4912      	ldr	r1, [pc, #72]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800366e:	4313      	orrs	r3, r2
 8003670:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	d008      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800367e:	4b0e      	ldr	r3, [pc, #56]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	490b      	ldr	r1, [pc, #44]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800368c:	4313      	orrs	r3, r2
 800368e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800369c:	4b06      	ldr	r3, [pc, #24]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	4903      	ldr	r1, [pc, #12]	; (80036b8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3748      	adds	r7, #72	; 0x48
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40007000 	.word	0x40007000
 80036c0:	10908100 	.word	0x10908100

080036c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e049      	b.n	800376a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7fd f92e 	bl	800094c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3304      	adds	r3, #4
 8003700:	4619      	mov	r1, r3
 8003702:	4610      	mov	r0, r2
 8003704:	f000 fd22 	bl	800414c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	d001      	beq.n	800378c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e040      	b.n	800380e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1c      	ldr	r2, [pc, #112]	; (800381c <HAL_TIM_Base_Start_IT+0xa8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00e      	beq.n	80037cc <HAL_TIM_Base_Start_IT+0x58>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b6:	d009      	beq.n	80037cc <HAL_TIM_Base_Start_IT+0x58>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a18      	ldr	r2, [pc, #96]	; (8003820 <HAL_TIM_Base_Start_IT+0xac>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_TIM_Base_Start_IT+0x58>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a17      	ldr	r2, [pc, #92]	; (8003824 <HAL_TIM_Base_Start_IT+0xb0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d115      	bne.n	80037f8 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	4b15      	ldr	r3, [pc, #84]	; (8003828 <HAL_TIM_Base_Start_IT+0xb4>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2b06      	cmp	r3, #6
 80037dc:	d015      	beq.n	800380a <HAL_TIM_Base_Start_IT+0x96>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e4:	d011      	beq.n	800380a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f042 0201 	orr.w	r2, r2, #1
 80037f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f6:	e008      	b.n	800380a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	e000      	b.n	800380c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40012c00 	.word	0x40012c00
 8003820:	40000400 	.word	0x40000400
 8003824:	40014000 	.word	0x40014000
 8003828:	00010007 	.word	0x00010007

0800382c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0201 	bic.w	r2, r2, #1
 8003842:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6a1a      	ldr	r2, [r3, #32]
 800384a:	f241 1311 	movw	r3, #4369	; 0x1111
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d10f      	bne.n	8003874 <HAL_TIM_Base_Stop_IT+0x48>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6a1a      	ldr	r2, [r3, #32]
 800385a:	f240 4344 	movw	r3, #1092	; 0x444
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d107      	bne.n	8003874 <HAL_TIM_Base_Stop_IT+0x48>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e049      	b.n	8003930 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d106      	bne.n	80038b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fd f889 	bl	80009c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2202      	movs	r2, #2
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3304      	adds	r3, #4
 80038c6:	4619      	mov	r1, r3
 80038c8:	4610      	mov	r0, r2
 80038ca:	f000 fc3f 	bl	800414c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d109      	bne.n	800395c <HAL_TIM_PWM_Start+0x24>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b01      	cmp	r3, #1
 8003952:	bf14      	ite	ne
 8003954:	2301      	movne	r3, #1
 8003956:	2300      	moveq	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	e03c      	b.n	80039d6 <HAL_TIM_PWM_Start+0x9e>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	2b04      	cmp	r3, #4
 8003960:	d109      	bne.n	8003976 <HAL_TIM_PWM_Start+0x3e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b01      	cmp	r3, #1
 800396c:	bf14      	ite	ne
 800396e:	2301      	movne	r3, #1
 8003970:	2300      	moveq	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	e02f      	b.n	80039d6 <HAL_TIM_PWM_Start+0x9e>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b08      	cmp	r3, #8
 800397a:	d109      	bne.n	8003990 <HAL_TIM_PWM_Start+0x58>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	e022      	b.n	80039d6 <HAL_TIM_PWM_Start+0x9e>
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	2b0c      	cmp	r3, #12
 8003994:	d109      	bne.n	80039aa <HAL_TIM_PWM_Start+0x72>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b01      	cmp	r3, #1
 80039a0:	bf14      	ite	ne
 80039a2:	2301      	movne	r3, #1
 80039a4:	2300      	moveq	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	e015      	b.n	80039d6 <HAL_TIM_PWM_Start+0x9e>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d109      	bne.n	80039c4 <HAL_TIM_PWM_Start+0x8c>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	bf14      	ite	ne
 80039bc:	2301      	movne	r3, #1
 80039be:	2300      	moveq	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e008      	b.n	80039d6 <HAL_TIM_PWM_Start+0x9e>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	bf14      	ite	ne
 80039d0:	2301      	movne	r3, #1
 80039d2:	2300      	moveq	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e088      	b.n	8003af0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d104      	bne.n	80039ee <HAL_TIM_PWM_Start+0xb6>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ec:	e023      	b.n	8003a36 <HAL_TIM_PWM_Start+0xfe>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b04      	cmp	r3, #4
 80039f2:	d104      	bne.n	80039fe <HAL_TIM_PWM_Start+0xc6>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039fc:	e01b      	b.n	8003a36 <HAL_TIM_PWM_Start+0xfe>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d104      	bne.n	8003a0e <HAL_TIM_PWM_Start+0xd6>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a0c:	e013      	b.n	8003a36 <HAL_TIM_PWM_Start+0xfe>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b0c      	cmp	r3, #12
 8003a12:	d104      	bne.n	8003a1e <HAL_TIM_PWM_Start+0xe6>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a1c:	e00b      	b.n	8003a36 <HAL_TIM_PWM_Start+0xfe>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d104      	bne.n	8003a2e <HAL_TIM_PWM_Start+0xf6>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a2c:	e003      	b.n	8003a36 <HAL_TIM_PWM_Start+0xfe>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2202      	movs	r2, #2
 8003a32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	6839      	ldr	r1, [r7, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 ff3c 	bl	80048bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a2b      	ldr	r2, [pc, #172]	; (8003af8 <HAL_TIM_PWM_Start+0x1c0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00e      	beq.n	8003a6c <HAL_TIM_PWM_Start+0x134>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a2a      	ldr	r2, [pc, #168]	; (8003afc <HAL_TIM_PWM_Start+0x1c4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d009      	beq.n	8003a6c <HAL_TIM_PWM_Start+0x134>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a28      	ldr	r2, [pc, #160]	; (8003b00 <HAL_TIM_PWM_Start+0x1c8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d004      	beq.n	8003a6c <HAL_TIM_PWM_Start+0x134>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a27      	ldr	r2, [pc, #156]	; (8003b04 <HAL_TIM_PWM_Start+0x1cc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d101      	bne.n	8003a70 <HAL_TIM_PWM_Start+0x138>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <HAL_TIM_PWM_Start+0x13a>
 8003a70:	2300      	movs	r3, #0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d007      	beq.n	8003a86 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a1b      	ldr	r2, [pc, #108]	; (8003af8 <HAL_TIM_PWM_Start+0x1c0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00e      	beq.n	8003aae <HAL_TIM_PWM_Start+0x176>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a98:	d009      	beq.n	8003aae <HAL_TIM_PWM_Start+0x176>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1a      	ldr	r2, [pc, #104]	; (8003b08 <HAL_TIM_PWM_Start+0x1d0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d004      	beq.n	8003aae <HAL_TIM_PWM_Start+0x176>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a14      	ldr	r2, [pc, #80]	; (8003afc <HAL_TIM_PWM_Start+0x1c4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d115      	bne.n	8003ada <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <HAL_TIM_PWM_Start+0x1d4>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b06      	cmp	r3, #6
 8003abe:	d015      	beq.n	8003aec <HAL_TIM_PWM_Start+0x1b4>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac6:	d011      	beq.n	8003aec <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ad8:	e008      	b.n	8003aec <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f042 0201 	orr.w	r2, r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	e000      	b.n	8003aee <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	40012c00 	.word	0x40012c00
 8003afc:	40014000 	.word	0x40014000
 8003b00:	40014400 	.word	0x40014400
 8003b04:	40014800 	.word	0x40014800
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	00010007 	.word	0x00010007

08003b10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d122      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d11b      	bne.n	8003b6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f06f 0202 	mvn.w	r2, #2
 8003b3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f003 0303 	and.w	r3, r3, #3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fadc 	bl	8004110 <HAL_TIM_IC_CaptureCallback>
 8003b58:	e005      	b.n	8003b66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 face 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fadf 	bl	8004124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	f003 0304 	and.w	r3, r3, #4
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	d122      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d11b      	bne.n	8003bc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0204 	mvn.w	r2, #4
 8003b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2202      	movs	r2, #2
 8003b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fab2 	bl	8004110 <HAL_TIM_IC_CaptureCallback>
 8003bac:	e005      	b.n	8003bba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 faa4 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fab5 	bl	8004124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d122      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d11b      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0208 	mvn.w	r2, #8
 8003be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2204      	movs	r2, #4
 8003bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fa88 	bl	8004110 <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fa7a 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fa8b 	bl	8004124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0310 	and.w	r3, r3, #16
 8003c1e:	2b10      	cmp	r3, #16
 8003c20:	d122      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b10      	cmp	r3, #16
 8003c2e:	d11b      	bne.n	8003c68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0210 	mvn.w	r2, #16
 8003c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fa5e 	bl	8004110 <HAL_TIM_IC_CaptureCallback>
 8003c54:	e005      	b.n	8003c62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fa50 	bl	80040fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fa61 	bl	8004124 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0301 	and.w	r3, r3, #1
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d10e      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d107      	bne.n	8003c94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0201 	mvn.w	r2, #1
 8003c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f7fc fd9c 	bl	80007cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9e:	2b80      	cmp	r3, #128	; 0x80
 8003ca0:	d10e      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cac:	2b80      	cmp	r3, #128	; 0x80
 8003cae:	d107      	bne.n	8003cc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fe9c 	bl	80049f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cce:	d10e      	bne.n	8003cee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cda:	2b80      	cmp	r3, #128	; 0x80
 8003cdc:	d107      	bne.n	8003cee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fe8f 	bl	8004a0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf8:	2b40      	cmp	r3, #64	; 0x40
 8003cfa:	d10e      	bne.n	8003d1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d06:	2b40      	cmp	r3, #64	; 0x40
 8003d08:	d107      	bne.n	8003d1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fa0f 	bl	8004138 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	f003 0320 	and.w	r3, r3, #32
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d10e      	bne.n	8003d46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0320 	and.w	r3, r3, #32
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d107      	bne.n	8003d46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f06f 0220 	mvn.w	r2, #32
 8003d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fe4f 	bl	80049e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e0fd      	b.n	8003f66 <HAL_TIM_PWM_ConfigChannel+0x216>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2b14      	cmp	r3, #20
 8003d76:	f200 80f0 	bhi.w	8003f5a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003d7a:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d80:	08003dd5 	.word	0x08003dd5
 8003d84:	08003f5b 	.word	0x08003f5b
 8003d88:	08003f5b 	.word	0x08003f5b
 8003d8c:	08003f5b 	.word	0x08003f5b
 8003d90:	08003e15 	.word	0x08003e15
 8003d94:	08003f5b 	.word	0x08003f5b
 8003d98:	08003f5b 	.word	0x08003f5b
 8003d9c:	08003f5b 	.word	0x08003f5b
 8003da0:	08003e57 	.word	0x08003e57
 8003da4:	08003f5b 	.word	0x08003f5b
 8003da8:	08003f5b 	.word	0x08003f5b
 8003dac:	08003f5b 	.word	0x08003f5b
 8003db0:	08003e97 	.word	0x08003e97
 8003db4:	08003f5b 	.word	0x08003f5b
 8003db8:	08003f5b 	.word	0x08003f5b
 8003dbc:	08003f5b 	.word	0x08003f5b
 8003dc0:	08003ed9 	.word	0x08003ed9
 8003dc4:	08003f5b 	.word	0x08003f5b
 8003dc8:	08003f5b 	.word	0x08003f5b
 8003dcc:	08003f5b 	.word	0x08003f5b
 8003dd0:	08003f19 	.word	0x08003f19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68b9      	ldr	r1, [r7, #8]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fa2e 	bl	800423c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	699a      	ldr	r2, [r3, #24]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0208 	orr.w	r2, r2, #8
 8003dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699a      	ldr	r2, [r3, #24]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 0204 	bic.w	r2, r2, #4
 8003dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6999      	ldr	r1, [r3, #24]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	619a      	str	r2, [r3, #24]
      break;
 8003e12:	e0a3      	b.n	8003f5c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fa94 	bl	8004348 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	699a      	ldr	r2, [r3, #24]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699a      	ldr	r2, [r3, #24]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6999      	ldr	r1, [r3, #24]
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	021a      	lsls	r2, r3, #8
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	619a      	str	r2, [r3, #24]
      break;
 8003e54:	e082      	b.n	8003f5c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 faf3 	bl	8004448 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f042 0208 	orr.w	r2, r2, #8
 8003e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	69da      	ldr	r2, [r3, #28]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0204 	bic.w	r2, r2, #4
 8003e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	69d9      	ldr	r1, [r3, #28]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	61da      	str	r2, [r3, #28]
      break;
 8003e94:	e062      	b.n	8003f5c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 fb51 	bl	8004544 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	69da      	ldr	r2, [r3, #28]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69da      	ldr	r2, [r3, #28]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	69d9      	ldr	r1, [r3, #28]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	021a      	lsls	r2, r3, #8
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	61da      	str	r2, [r3, #28]
      break;
 8003ed6:	e041      	b.n	8003f5c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68b9      	ldr	r1, [r7, #8]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fb94 	bl	800460c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f042 0208 	orr.w	r2, r2, #8
 8003ef2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0204 	bic.w	r2, r2, #4
 8003f02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f16:	e021      	b.n	8003f5c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68b9      	ldr	r1, [r7, #8]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fbd2 	bl	80046c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	691b      	ldr	r3, [r3, #16]
 8003f4e:	021a      	lsls	r2, r3, #8
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003f58:	e000      	b.n	8003f5c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8003f5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop

08003f70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_TIM_ConfigClockSource+0x18>
 8003f84:	2302      	movs	r3, #2
 8003f86:	e0b5      	b.n	80040f4 <HAL_TIM_ConfigClockSource+0x184>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003faa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fb2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc4:	d03e      	beq.n	8004044 <HAL_TIM_ConfigClockSource+0xd4>
 8003fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fca:	f200 8087 	bhi.w	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8003fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd2:	f000 8085 	beq.w	80040e0 <HAL_TIM_ConfigClockSource+0x170>
 8003fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fda:	d87f      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8003fdc:	2b70      	cmp	r3, #112	; 0x70
 8003fde:	d01a      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0xa6>
 8003fe0:	2b70      	cmp	r3, #112	; 0x70
 8003fe2:	d87b      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8003fe4:	2b60      	cmp	r3, #96	; 0x60
 8003fe6:	d050      	beq.n	800408a <HAL_TIM_ConfigClockSource+0x11a>
 8003fe8:	2b60      	cmp	r3, #96	; 0x60
 8003fea:	d877      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8003fec:	2b50      	cmp	r3, #80	; 0x50
 8003fee:	d03c      	beq.n	800406a <HAL_TIM_ConfigClockSource+0xfa>
 8003ff0:	2b50      	cmp	r3, #80	; 0x50
 8003ff2:	d873      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8003ff4:	2b40      	cmp	r3, #64	; 0x40
 8003ff6:	d058      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x13a>
 8003ff8:	2b40      	cmp	r3, #64	; 0x40
 8003ffa:	d86f      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8003ffc:	2b30      	cmp	r3, #48	; 0x30
 8003ffe:	d064      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x15a>
 8004000:	2b30      	cmp	r3, #48	; 0x30
 8004002:	d86b      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 8004004:	2b20      	cmp	r3, #32
 8004006:	d060      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x15a>
 8004008:	2b20      	cmp	r3, #32
 800400a:	d867      	bhi.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
 800400c:	2b00      	cmp	r3, #0
 800400e:	d05c      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x15a>
 8004010:	2b10      	cmp	r3, #16
 8004012:	d05a      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004014:	e062      	b.n	80040dc <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6899      	ldr	r1, [r3, #8]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f000 fc29 	bl	800487c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004038:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	609a      	str	r2, [r3, #8]
      break;
 8004042:	e04e      	b.n	80040e2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6818      	ldr	r0, [r3, #0]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	6899      	ldr	r1, [r3, #8]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f000 fc12 	bl	800487c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004066:	609a      	str	r2, [r3, #8]
      break;
 8004068:	e03b      	b.n	80040e2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6859      	ldr	r1, [r3, #4]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	461a      	mov	r2, r3
 8004078:	f000 fb86 	bl	8004788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2150      	movs	r1, #80	; 0x50
 8004082:	4618      	mov	r0, r3
 8004084:	f000 fbdf 	bl	8004846 <TIM_ITRx_SetConfig>
      break;
 8004088:	e02b      	b.n	80040e2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6859      	ldr	r1, [r3, #4]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	461a      	mov	r2, r3
 8004098:	f000 fba5 	bl	80047e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2160      	movs	r1, #96	; 0x60
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 fbcf 	bl	8004846 <TIM_ITRx_SetConfig>
      break;
 80040a8:	e01b      	b.n	80040e2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6818      	ldr	r0, [r3, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6859      	ldr	r1, [r3, #4]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f000 fb66 	bl	8004788 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2140      	movs	r1, #64	; 0x40
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fbbf 	bl	8004846 <TIM_ITRx_SetConfig>
      break;
 80040c8:	e00b      	b.n	80040e2 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4619      	mov	r1, r3
 80040d4:	4610      	mov	r0, r2
 80040d6:	f000 fbb6 	bl	8004846 <TIM_ITRx_SetConfig>
        break;
 80040da:	e002      	b.n	80040e2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80040dc:	bf00      	nop
 80040de:	e000      	b.n	80040e2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 80040e0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a32      	ldr	r2, [pc, #200]	; (8004228 <TIM_Base_SetConfig+0xdc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d007      	beq.n	8004174 <TIM_Base_SetConfig+0x28>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416a:	d003      	beq.n	8004174 <TIM_Base_SetConfig+0x28>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a2f      	ldr	r2, [pc, #188]	; (800422c <TIM_Base_SetConfig+0xe0>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d108      	bne.n	8004186 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a27      	ldr	r2, [pc, #156]	; (8004228 <TIM_Base_SetConfig+0xdc>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d013      	beq.n	80041b6 <TIM_Base_SetConfig+0x6a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004194:	d00f      	beq.n	80041b6 <TIM_Base_SetConfig+0x6a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a24      	ldr	r2, [pc, #144]	; (800422c <TIM_Base_SetConfig+0xe0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00b      	beq.n	80041b6 <TIM_Base_SetConfig+0x6a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a23      	ldr	r2, [pc, #140]	; (8004230 <TIM_Base_SetConfig+0xe4>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d007      	beq.n	80041b6 <TIM_Base_SetConfig+0x6a>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a22      	ldr	r2, [pc, #136]	; (8004234 <TIM_Base_SetConfig+0xe8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d003      	beq.n	80041b6 <TIM_Base_SetConfig+0x6a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a21      	ldr	r2, [pc, #132]	; (8004238 <TIM_Base_SetConfig+0xec>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d108      	bne.n	80041c8 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a0e      	ldr	r2, [pc, #56]	; (8004228 <TIM_Base_SetConfig+0xdc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00b      	beq.n	800420c <TIM_Base_SetConfig+0xc0>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a0e      	ldr	r2, [pc, #56]	; (8004230 <TIM_Base_SetConfig+0xe4>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d007      	beq.n	800420c <TIM_Base_SetConfig+0xc0>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a0d      	ldr	r2, [pc, #52]	; (8004234 <TIM_Base_SetConfig+0xe8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d003      	beq.n	800420c <TIM_Base_SetConfig+0xc0>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a0c      	ldr	r2, [pc, #48]	; (8004238 <TIM_Base_SetConfig+0xec>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d103      	bne.n	8004214 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	615a      	str	r2, [r3, #20]
}
 800421a:	bf00      	nop
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40012c00 	.word	0x40012c00
 800422c:	40000400 	.word	0x40000400
 8004230:	40014000 	.word	0x40014000
 8004234:	40014400 	.word	0x40014400
 8004238:	40014800 	.word	0x40014800

0800423c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f023 0201 	bic.w	r2, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800426a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0303 	bic.w	r3, r3, #3
 8004276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f023 0302 	bic.w	r3, r3, #2
 8004288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a28      	ldr	r2, [pc, #160]	; (8004338 <TIM_OC1_SetConfig+0xfc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00b      	beq.n	80042b4 <TIM_OC1_SetConfig+0x78>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a27      	ldr	r2, [pc, #156]	; (800433c <TIM_OC1_SetConfig+0x100>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d007      	beq.n	80042b4 <TIM_OC1_SetConfig+0x78>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a26      	ldr	r2, [pc, #152]	; (8004340 <TIM_OC1_SetConfig+0x104>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d003      	beq.n	80042b4 <TIM_OC1_SetConfig+0x78>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a25      	ldr	r2, [pc, #148]	; (8004344 <TIM_OC1_SetConfig+0x108>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d10c      	bne.n	80042ce <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 0308 	bic.w	r3, r3, #8
 80042ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f023 0304 	bic.w	r3, r3, #4
 80042cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a19      	ldr	r2, [pc, #100]	; (8004338 <TIM_OC1_SetConfig+0xfc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00b      	beq.n	80042ee <TIM_OC1_SetConfig+0xb2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a18      	ldr	r2, [pc, #96]	; (800433c <TIM_OC1_SetConfig+0x100>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d007      	beq.n	80042ee <TIM_OC1_SetConfig+0xb2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a17      	ldr	r2, [pc, #92]	; (8004340 <TIM_OC1_SetConfig+0x104>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d003      	beq.n	80042ee <TIM_OC1_SetConfig+0xb2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a16      	ldr	r2, [pc, #88]	; (8004344 <TIM_OC1_SetConfig+0x108>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d111      	bne.n	8004312 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	621a      	str	r2, [r3, #32]
}
 800432c:	bf00      	nop
 800432e:	371c      	adds	r7, #28
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	40012c00 	.word	0x40012c00
 800433c:	40014000 	.word	0x40014000
 8004340:	40014400 	.word	0x40014400
 8004344:	40014800 	.word	0x40014800

08004348 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004348:	b480      	push	{r7}
 800434a:	b087      	sub	sp, #28
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	f023 0210 	bic.w	r2, r3, #16
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800437a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f023 0320 	bic.w	r3, r3, #32
 8004396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a24      	ldr	r2, [pc, #144]	; (8004438 <TIM_OC2_SetConfig+0xf0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d10d      	bne.n	80043c8 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	011b      	lsls	r3, r3, #4
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a1b      	ldr	r2, [pc, #108]	; (8004438 <TIM_OC2_SetConfig+0xf0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d00b      	beq.n	80043e8 <TIM_OC2_SetConfig+0xa0>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a1a      	ldr	r2, [pc, #104]	; (800443c <TIM_OC2_SetConfig+0xf4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d007      	beq.n	80043e8 <TIM_OC2_SetConfig+0xa0>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a19      	ldr	r2, [pc, #100]	; (8004440 <TIM_OC2_SetConfig+0xf8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d003      	beq.n	80043e8 <TIM_OC2_SetConfig+0xa0>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a18      	ldr	r2, [pc, #96]	; (8004444 <TIM_OC2_SetConfig+0xfc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d113      	bne.n	8004410 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043ee:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043f6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4313      	orrs	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40012c00 	.word	0x40012c00
 800443c:	40014000 	.word	0x40014000
 8004440:	40014400 	.word	0x40014400
 8004444:	40014800 	.word	0x40014800

08004448 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	69db      	ldr	r3, [r3, #28]
 800446e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0303 	bic.w	r3, r3, #3
 8004482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	021b      	lsls	r3, r3, #8
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	4313      	orrs	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a23      	ldr	r2, [pc, #140]	; (8004534 <TIM_OC3_SetConfig+0xec>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d10d      	bne.n	80044c6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	021b      	lsls	r3, r3, #8
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044c4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a1a      	ldr	r2, [pc, #104]	; (8004534 <TIM_OC3_SetConfig+0xec>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00b      	beq.n	80044e6 <TIM_OC3_SetConfig+0x9e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a19      	ldr	r2, [pc, #100]	; (8004538 <TIM_OC3_SetConfig+0xf0>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d007      	beq.n	80044e6 <TIM_OC3_SetConfig+0x9e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a18      	ldr	r2, [pc, #96]	; (800453c <TIM_OC3_SetConfig+0xf4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d003      	beq.n	80044e6 <TIM_OC3_SetConfig+0x9e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a17      	ldr	r2, [pc, #92]	; (8004540 <TIM_OC3_SetConfig+0xf8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d113      	bne.n	800450e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	697a      	ldr	r2, [r7, #20]
 8004526:	621a      	str	r2, [r3, #32]
}
 8004528:	bf00      	nop
 800452a:	371c      	adds	r7, #28
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	40012c00 	.word	0x40012c00
 8004538:	40014000 	.word	0x40014000
 800453c:	40014400 	.word	0x40014400
 8004540:	40014800 	.word	0x40014800

08004544 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	021b      	lsls	r3, r3, #8
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	4313      	orrs	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004592:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	031b      	lsls	r3, r3, #12
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a16      	ldr	r2, [pc, #88]	; (80045fc <TIM_OC4_SetConfig+0xb8>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00b      	beq.n	80045c0 <TIM_OC4_SetConfig+0x7c>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a15      	ldr	r2, [pc, #84]	; (8004600 <TIM_OC4_SetConfig+0xbc>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d007      	beq.n	80045c0 <TIM_OC4_SetConfig+0x7c>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a14      	ldr	r2, [pc, #80]	; (8004604 <TIM_OC4_SetConfig+0xc0>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d003      	beq.n	80045c0 <TIM_OC4_SetConfig+0x7c>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a13      	ldr	r2, [pc, #76]	; (8004608 <TIM_OC4_SetConfig+0xc4>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d109      	bne.n	80045d4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	019b      	lsls	r3, r3, #6
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	621a      	str	r2, [r3, #32]
}
 80045ee:	bf00      	nop
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40012c00 	.word	0x40012c00
 8004600:	40014000 	.word	0x40014000
 8004604:	40014400 	.word	0x40014400
 8004608:	40014800 	.word	0x40014800

0800460c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004650:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	041b      	lsls	r3, r3, #16
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a15      	ldr	r2, [pc, #84]	; (80046b8 <TIM_OC5_SetConfig+0xac>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00b      	beq.n	800467e <TIM_OC5_SetConfig+0x72>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a14      	ldr	r2, [pc, #80]	; (80046bc <TIM_OC5_SetConfig+0xb0>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d007      	beq.n	800467e <TIM_OC5_SetConfig+0x72>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a13      	ldr	r2, [pc, #76]	; (80046c0 <TIM_OC5_SetConfig+0xb4>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d003      	beq.n	800467e <TIM_OC5_SetConfig+0x72>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <TIM_OC5_SetConfig+0xb8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d109      	bne.n	8004692 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004684:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	021b      	lsls	r3, r3, #8
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	4313      	orrs	r3, r2
 8004690:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	621a      	str	r2, [r3, #32]
}
 80046ac:	bf00      	nop
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	40012c00 	.word	0x40012c00
 80046bc:	40014000 	.word	0x40014000
 80046c0:	40014400 	.word	0x40014400
 80046c4:	40014800 	.word	0x40014800

080046c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b087      	sub	sp, #28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800470e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	051b      	lsls	r3, r3, #20
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a16      	ldr	r2, [pc, #88]	; (8004778 <TIM_OC6_SetConfig+0xb0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d00b      	beq.n	800473c <TIM_OC6_SetConfig+0x74>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a15      	ldr	r2, [pc, #84]	; (800477c <TIM_OC6_SetConfig+0xb4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d007      	beq.n	800473c <TIM_OC6_SetConfig+0x74>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a14      	ldr	r2, [pc, #80]	; (8004780 <TIM_OC6_SetConfig+0xb8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d003      	beq.n	800473c <TIM_OC6_SetConfig+0x74>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a13      	ldr	r2, [pc, #76]	; (8004784 <TIM_OC6_SetConfig+0xbc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d109      	bne.n	8004750 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004742:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	029b      	lsls	r3, r3, #10
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	621a      	str	r2, [r3, #32]
}
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40012c00 	.word	0x40012c00
 800477c:	40014000 	.word	0x40014000
 8004780:	40014400 	.word	0x40014400
 8004784:	40014800 	.word	0x40014800

08004788 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6a1b      	ldr	r3, [r3, #32]
 8004798:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a1b      	ldr	r3, [r3, #32]
 800479e:	f023 0201 	bic.w	r2, r3, #1
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	011b      	lsls	r3, r3, #4
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f023 030a 	bic.w	r3, r3, #10
 80047c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	621a      	str	r2, [r3, #32]
}
 80047da:	bf00      	nop
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b087      	sub	sp, #28
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f023 0210 	bic.w	r2, r3, #16
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004810:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	031b      	lsls	r3, r3, #12
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004822:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	4313      	orrs	r3, r2
 800482c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	621a      	str	r2, [r3, #32]
}
 800483a:	bf00      	nop
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004846:	b480      	push	{r7}
 8004848:	b085      	sub	sp, #20
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4313      	orrs	r3, r2
 8004864:	f043 0307 	orr.w	r3, r3, #7
 8004868:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	609a      	str	r2, [r3, #8]
}
 8004870:	bf00      	nop
 8004872:	3714      	adds	r7, #20
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004896:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	021a      	lsls	r2, r3, #8
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	431a      	orrs	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	609a      	str	r2, [r3, #8]
}
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	2201      	movs	r2, #1
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a1a      	ldr	r2, [r3, #32]
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	43db      	mvns	r3, r3
 80048de:	401a      	ands	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a1a      	ldr	r2, [r3, #32]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f003 031f 	and.w	r3, r3, #31
 80048ee:	6879      	ldr	r1, [r7, #4]
 80048f0:	fa01 f303 	lsl.w	r3, r1, r3
 80048f4:	431a      	orrs	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	621a      	str	r2, [r3, #32]
}
 80048fa:	bf00      	nop
 80048fc:	371c      	adds	r7, #28
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800491c:	2302      	movs	r3, #2
 800491e:	e054      	b.n	80049ca <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a24      	ldr	r2, [pc, #144]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d108      	bne.n	800495c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004950:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	4313      	orrs	r3, r2
 800495a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004962:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a17      	ldr	r2, [pc, #92]	; (80049d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00e      	beq.n	800499e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004988:	d009      	beq.n	800499e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a13      	ldr	r2, [pc, #76]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d004      	beq.n	800499e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a11      	ldr	r2, [pc, #68]	; (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d10c      	bne.n	80049b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40012c00 	.word	0x40012c00
 80049dc:	40000400 	.word	0x40000400
 80049e0:	40014000 	.word	0x40014000

080049e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e040      	b.n	8004ab4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d106      	bne.n	8004a48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7fc f812 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2224      	movs	r2, #36	; 0x24
 8004a4c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f022 0201 	bic.w	r2, r2, #1
 8004a5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f8c0 	bl	8004be4 <UART_SetConfig>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e022      	b.n	8004ab4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f9ea 	bl	8004e50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 fa71 	bl	8004f94 <UART_CheckIdleState>
 8004ab2:	4603      	mov	r3, r0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08a      	sub	sp, #40	; 0x28
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	603b      	str	r3, [r7, #0]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	f040 8082 	bne.w	8004bda <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <HAL_UART_Transmit+0x26>
 8004adc:	88fb      	ldrh	r3, [r7, #6]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e07a      	b.n	8004bdc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_UART_Transmit+0x38>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e073      	b.n	8004bdc <HAL_UART_Transmit+0x120>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2221      	movs	r2, #33	; 0x21
 8004b08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b0a:	f7fc f919 	bl	8000d40 <HAL_GetTick>
 8004b0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	88fa      	ldrh	r2, [r7, #6]
 8004b14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	88fa      	ldrh	r2, [r7, #6]
 8004b1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b28:	d108      	bne.n	8004b3c <HAL_UART_Transmit+0x80>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d104      	bne.n	8004b3c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	e003      	b.n	8004b44 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b40:	2300      	movs	r3, #0
 8004b42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004b4c:	e02d      	b.n	8004baa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2200      	movs	r2, #0
 8004b56:	2180      	movs	r1, #128	; 0x80
 8004b58:	68f8      	ldr	r0, [r7, #12]
 8004b5a:	f000 fa64 	bl	8005026 <UART_WaitOnFlagUntilTimeout>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e039      	b.n	8004bdc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10b      	bne.n	8004b86 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	881a      	ldrh	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b7a:	b292      	uxth	r2, r2
 8004b7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	3302      	adds	r3, #2
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	e008      	b.n	8004b98 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	781a      	ldrb	r2, [r3, #0]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	b292      	uxth	r2, r2
 8004b90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	3301      	adds	r3, #1
 8004b96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1cb      	bne.n	8004b4e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2140      	movs	r1, #64	; 0x40
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 fa30 	bl	8005026 <UART_WaitOnFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e005      	b.n	8004bdc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e000      	b.n	8004bdc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004bda:	2302      	movs	r3, #2
  }
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3720      	adds	r7, #32
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b8a      	ldr	r3, [pc, #552]	; (8004e38 <UART_SetConfig+0x254>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	6979      	ldr	r1, [r7, #20]
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a78      	ldr	r2, [pc, #480]	; (8004e3c <UART_SetConfig+0x258>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d120      	bne.n	8004ca2 <UART_SetConfig+0xbe>
 8004c60:	4b77      	ldr	r3, [pc, #476]	; (8004e40 <UART_SetConfig+0x25c>)
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	f003 0303 	and.w	r3, r3, #3
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d817      	bhi.n	8004c9c <UART_SetConfig+0xb8>
 8004c6c:	a201      	add	r2, pc, #4	; (adr r2, 8004c74 <UART_SetConfig+0x90>)
 8004c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c72:	bf00      	nop
 8004c74:	08004c85 	.word	0x08004c85
 8004c78:	08004c91 	.word	0x08004c91
 8004c7c:	08004c97 	.word	0x08004c97
 8004c80:	08004c8b 	.word	0x08004c8b
 8004c84:	2300      	movs	r3, #0
 8004c86:	77fb      	strb	r3, [r7, #31]
 8004c88:	e01d      	b.n	8004cc6 <UART_SetConfig+0xe2>
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	77fb      	strb	r3, [r7, #31]
 8004c8e:	e01a      	b.n	8004cc6 <UART_SetConfig+0xe2>
 8004c90:	2304      	movs	r3, #4
 8004c92:	77fb      	strb	r3, [r7, #31]
 8004c94:	e017      	b.n	8004cc6 <UART_SetConfig+0xe2>
 8004c96:	2308      	movs	r3, #8
 8004c98:	77fb      	strb	r3, [r7, #31]
 8004c9a:	e014      	b.n	8004cc6 <UART_SetConfig+0xe2>
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	77fb      	strb	r3, [r7, #31]
 8004ca0:	e011      	b.n	8004cc6 <UART_SetConfig+0xe2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a67      	ldr	r2, [pc, #412]	; (8004e44 <UART_SetConfig+0x260>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d102      	bne.n	8004cb2 <UART_SetConfig+0xce>
 8004cac:	2300      	movs	r3, #0
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e009      	b.n	8004cc6 <UART_SetConfig+0xe2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a64      	ldr	r2, [pc, #400]	; (8004e48 <UART_SetConfig+0x264>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d102      	bne.n	8004cc2 <UART_SetConfig+0xde>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	77fb      	strb	r3, [r7, #31]
 8004cc0:	e001      	b.n	8004cc6 <UART_SetConfig+0xe2>
 8004cc2:	2310      	movs	r3, #16
 8004cc4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cce:	d15b      	bne.n	8004d88 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004cd0:	7ffb      	ldrb	r3, [r7, #31]
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d827      	bhi.n	8004d26 <UART_SetConfig+0x142>
 8004cd6:	a201      	add	r2, pc, #4	; (adr r2, 8004cdc <UART_SetConfig+0xf8>)
 8004cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cdc:	08004d01 	.word	0x08004d01
 8004ce0:	08004d09 	.word	0x08004d09
 8004ce4:	08004d11 	.word	0x08004d11
 8004ce8:	08004d27 	.word	0x08004d27
 8004cec:	08004d17 	.word	0x08004d17
 8004cf0:	08004d27 	.word	0x08004d27
 8004cf4:	08004d27 	.word	0x08004d27
 8004cf8:	08004d27 	.word	0x08004d27
 8004cfc:	08004d1f 	.word	0x08004d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d00:	f7fe fb76 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 8004d04:	61b8      	str	r0, [r7, #24]
        break;
 8004d06:	e013      	b.n	8004d30 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d08:	f7fe fb94 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 8004d0c:	61b8      	str	r0, [r7, #24]
        break;
 8004d0e:	e00f      	b.n	8004d30 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d10:	4b4e      	ldr	r3, [pc, #312]	; (8004e4c <UART_SetConfig+0x268>)
 8004d12:	61bb      	str	r3, [r7, #24]
        break;
 8004d14:	e00c      	b.n	8004d30 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d16:	f7fe faf5 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004d1a:	61b8      	str	r0, [r7, #24]
        break;
 8004d1c:	e008      	b.n	8004d30 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d22:	61bb      	str	r3, [r7, #24]
        break;
 8004d24:	e004      	b.n	8004d30 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	77bb      	strb	r3, [r7, #30]
        break;
 8004d2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d074      	beq.n	8004e20 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	005a      	lsls	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	441a      	add	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	2b0f      	cmp	r3, #15
 8004d52:	d916      	bls.n	8004d82 <UART_SetConfig+0x19e>
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d5a:	d212      	bcs.n	8004d82 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	f023 030f 	bic.w	r3, r3, #15
 8004d64:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	085b      	lsrs	r3, r3, #1
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	89fb      	ldrh	r3, [r7, #14]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	89fa      	ldrh	r2, [r7, #14]
 8004d7e:	60da      	str	r2, [r3, #12]
 8004d80:	e04e      	b.n	8004e20 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	77bb      	strb	r3, [r7, #30]
 8004d86:	e04b      	b.n	8004e20 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d88:	7ffb      	ldrb	r3, [r7, #31]
 8004d8a:	2b08      	cmp	r3, #8
 8004d8c:	d827      	bhi.n	8004dde <UART_SetConfig+0x1fa>
 8004d8e:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <UART_SetConfig+0x1b0>)
 8004d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d94:	08004db9 	.word	0x08004db9
 8004d98:	08004dc1 	.word	0x08004dc1
 8004d9c:	08004dc9 	.word	0x08004dc9
 8004da0:	08004ddf 	.word	0x08004ddf
 8004da4:	08004dcf 	.word	0x08004dcf
 8004da8:	08004ddf 	.word	0x08004ddf
 8004dac:	08004ddf 	.word	0x08004ddf
 8004db0:	08004ddf 	.word	0x08004ddf
 8004db4:	08004dd7 	.word	0x08004dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004db8:	f7fe fb1a 	bl	80033f0 <HAL_RCC_GetPCLK1Freq>
 8004dbc:	61b8      	str	r0, [r7, #24]
        break;
 8004dbe:	e013      	b.n	8004de8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dc0:	f7fe fb38 	bl	8003434 <HAL_RCC_GetPCLK2Freq>
 8004dc4:	61b8      	str	r0, [r7, #24]
        break;
 8004dc6:	e00f      	b.n	8004de8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc8:	4b20      	ldr	r3, [pc, #128]	; (8004e4c <UART_SetConfig+0x268>)
 8004dca:	61bb      	str	r3, [r7, #24]
        break;
 8004dcc:	e00c      	b.n	8004de8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dce:	f7fe fa99 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 8004dd2:	61b8      	str	r0, [r7, #24]
        break;
 8004dd4:	e008      	b.n	8004de8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dda:	61bb      	str	r3, [r7, #24]
        break;
 8004ddc:	e004      	b.n	8004de8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	77bb      	strb	r3, [r7, #30]
        break;
 8004de6:	bf00      	nop
    }

    if (pclk != 0U)
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d018      	beq.n	8004e20 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	085a      	lsrs	r2, r3, #1
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	441a      	add	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	2b0f      	cmp	r3, #15
 8004e08:	d908      	bls.n	8004e1c <UART_SetConfig+0x238>
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e10:	d204      	bcs.n	8004e1c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	60da      	str	r2, [r3, #12]
 8004e1a:	e001      	b.n	8004e20 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3720      	adds	r7, #32
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	efff69f3 	.word	0xefff69f3
 8004e3c:	40013800 	.word	0x40013800
 8004e40:	40021000 	.word	0x40021000
 8004e44:	40004400 	.word	0x40004400
 8004e48:	40004800 	.word	0x40004800
 8004e4c:	007a1200 	.word	0x007a1200

08004e50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00a      	beq.n	8004e7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00a      	beq.n	8004ebe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d00a      	beq.n	8004ee0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	430a      	orrs	r2, r1
 8004ede:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	430a      	orrs	r2, r1
 8004f00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01a      	beq.n	8004f66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f4e:	d10a      	bne.n	8004f66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	605a      	str	r2, [r3, #4]
  }
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af02      	add	r7, sp, #8
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fa4:	f7fb fecc 	bl	8000d40 <HAL_GetTick>
 8004fa8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0308 	and.w	r3, r3, #8
 8004fb4:	2b08      	cmp	r3, #8
 8004fb6:	d10e      	bne.n	8004fd6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f82d 	bl	8005026 <UART_WaitOnFlagUntilTimeout>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e023      	b.n	800501e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0304 	and.w	r3, r3, #4
 8004fe0:	2b04      	cmp	r3, #4
 8004fe2:	d10e      	bne.n	8005002 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004fe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f817 	bl	8005026 <UART_WaitOnFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e00d      	b.n	800501e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2220      	movs	r2, #32
 8005006:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b084      	sub	sp, #16
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	603b      	str	r3, [r7, #0]
 8005032:	4613      	mov	r3, r2
 8005034:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005036:	e05e      	b.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503e:	d05a      	beq.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005040:	f7fb fe7e 	bl	8000d40 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	429a      	cmp	r2, r3
 800504e:	d302      	bcc.n	8005056 <UART_WaitOnFlagUntilTimeout+0x30>
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d11b      	bne.n	800508e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005064:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0201 	bic.w	r2, r2, #1
 8005074:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2220      	movs	r2, #32
 800507a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2220      	movs	r2, #32
 8005080:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e043      	b.n	8005116 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d02c      	beq.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050aa:	d124      	bne.n	80050f6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80050b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050c4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0201 	bic.w	r2, r2, #1
 80050d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2220      	movs	r2, #32
 80050e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2220      	movs	r2, #32
 80050e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e00f      	b.n	8005116 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	69da      	ldr	r2, [r3, #28]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4013      	ands	r3, r2
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	429a      	cmp	r2, r3
 8005104:	bf0c      	ite	eq
 8005106:	2301      	moveq	r3, #1
 8005108:	2300      	movne	r3, #0
 800510a:	b2db      	uxtb	r3, r3
 800510c:	461a      	mov	r2, r3
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	429a      	cmp	r2, r3
 8005112:	d091      	beq.n	8005038 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <atoi>:
 800511e:	220a      	movs	r2, #10
 8005120:	2100      	movs	r1, #0
 8005122:	f000 b8d7 	b.w	80052d4 <strtol>
	...

08005128 <__errno>:
 8005128:	4b01      	ldr	r3, [pc, #4]	; (8005130 <__errno+0x8>)
 800512a:	6818      	ldr	r0, [r3, #0]
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	20000010 	.word	0x20000010

08005134 <__libc_init_array>:
 8005134:	b570      	push	{r4, r5, r6, lr}
 8005136:	4d0d      	ldr	r5, [pc, #52]	; (800516c <__libc_init_array+0x38>)
 8005138:	4c0d      	ldr	r4, [pc, #52]	; (8005170 <__libc_init_array+0x3c>)
 800513a:	1b64      	subs	r4, r4, r5
 800513c:	10a4      	asrs	r4, r4, #2
 800513e:	2600      	movs	r6, #0
 8005140:	42a6      	cmp	r6, r4
 8005142:	d109      	bne.n	8005158 <__libc_init_array+0x24>
 8005144:	4d0b      	ldr	r5, [pc, #44]	; (8005174 <__libc_init_array+0x40>)
 8005146:	4c0c      	ldr	r4, [pc, #48]	; (8005178 <__libc_init_array+0x44>)
 8005148:	f000 fcdc 	bl	8005b04 <_init>
 800514c:	1b64      	subs	r4, r4, r5
 800514e:	10a4      	asrs	r4, r4, #2
 8005150:	2600      	movs	r6, #0
 8005152:	42a6      	cmp	r6, r4
 8005154:	d105      	bne.n	8005162 <__libc_init_array+0x2e>
 8005156:	bd70      	pop	{r4, r5, r6, pc}
 8005158:	f855 3b04 	ldr.w	r3, [r5], #4
 800515c:	4798      	blx	r3
 800515e:	3601      	adds	r6, #1
 8005160:	e7ee      	b.n	8005140 <__libc_init_array+0xc>
 8005162:	f855 3b04 	ldr.w	r3, [r5], #4
 8005166:	4798      	blx	r3
 8005168:	3601      	adds	r6, #1
 800516a:	e7f2      	b.n	8005152 <__libc_init_array+0x1e>
 800516c:	08005c90 	.word	0x08005c90
 8005170:	08005c90 	.word	0x08005c90
 8005174:	08005c90 	.word	0x08005c90
 8005178:	08005c94 	.word	0x08005c94

0800517c <memset>:
 800517c:	4402      	add	r2, r0
 800517e:	4603      	mov	r3, r0
 8005180:	4293      	cmp	r3, r2
 8005182:	d100      	bne.n	8005186 <memset+0xa>
 8005184:	4770      	bx	lr
 8005186:	f803 1b01 	strb.w	r1, [r3], #1
 800518a:	e7f9      	b.n	8005180 <memset+0x4>

0800518c <siprintf>:
 800518c:	b40e      	push	{r1, r2, r3}
 800518e:	b500      	push	{lr}
 8005190:	b09c      	sub	sp, #112	; 0x70
 8005192:	ab1d      	add	r3, sp, #116	; 0x74
 8005194:	9002      	str	r0, [sp, #8]
 8005196:	9006      	str	r0, [sp, #24]
 8005198:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800519c:	4809      	ldr	r0, [pc, #36]	; (80051c4 <siprintf+0x38>)
 800519e:	9107      	str	r1, [sp, #28]
 80051a0:	9104      	str	r1, [sp, #16]
 80051a2:	4909      	ldr	r1, [pc, #36]	; (80051c8 <siprintf+0x3c>)
 80051a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80051a8:	9105      	str	r1, [sp, #20]
 80051aa:	6800      	ldr	r0, [r0, #0]
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	a902      	add	r1, sp, #8
 80051b0:	f000 f8f6 	bl	80053a0 <_svfiprintf_r>
 80051b4:	9b02      	ldr	r3, [sp, #8]
 80051b6:	2200      	movs	r2, #0
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	b01c      	add	sp, #112	; 0x70
 80051bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80051c0:	b003      	add	sp, #12
 80051c2:	4770      	bx	lr
 80051c4:	20000010 	.word	0x20000010
 80051c8:	ffff0208 	.word	0xffff0208

080051cc <_strtol_l.isra.0>:
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d2:	d001      	beq.n	80051d8 <_strtol_l.isra.0+0xc>
 80051d4:	2b24      	cmp	r3, #36	; 0x24
 80051d6:	d906      	bls.n	80051e6 <_strtol_l.isra.0+0x1a>
 80051d8:	f7ff ffa6 	bl	8005128 <__errno>
 80051dc:	2316      	movs	r3, #22
 80051de:	6003      	str	r3, [r0, #0]
 80051e0:	2000      	movs	r0, #0
 80051e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e6:	4f3a      	ldr	r7, [pc, #232]	; (80052d0 <_strtol_l.isra.0+0x104>)
 80051e8:	468e      	mov	lr, r1
 80051ea:	4676      	mov	r6, lr
 80051ec:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80051f0:	5de5      	ldrb	r5, [r4, r7]
 80051f2:	f015 0508 	ands.w	r5, r5, #8
 80051f6:	d1f8      	bne.n	80051ea <_strtol_l.isra.0+0x1e>
 80051f8:	2c2d      	cmp	r4, #45	; 0x2d
 80051fa:	d134      	bne.n	8005266 <_strtol_l.isra.0+0x9a>
 80051fc:	f89e 4000 	ldrb.w	r4, [lr]
 8005200:	f04f 0801 	mov.w	r8, #1
 8005204:	f106 0e02 	add.w	lr, r6, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d05c      	beq.n	80052c6 <_strtol_l.isra.0+0xfa>
 800520c:	2b10      	cmp	r3, #16
 800520e:	d10c      	bne.n	800522a <_strtol_l.isra.0+0x5e>
 8005210:	2c30      	cmp	r4, #48	; 0x30
 8005212:	d10a      	bne.n	800522a <_strtol_l.isra.0+0x5e>
 8005214:	f89e 4000 	ldrb.w	r4, [lr]
 8005218:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800521c:	2c58      	cmp	r4, #88	; 0x58
 800521e:	d14d      	bne.n	80052bc <_strtol_l.isra.0+0xf0>
 8005220:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005224:	2310      	movs	r3, #16
 8005226:	f10e 0e02 	add.w	lr, lr, #2
 800522a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800522e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005232:	2600      	movs	r6, #0
 8005234:	fbbc f9f3 	udiv	r9, ip, r3
 8005238:	4635      	mov	r5, r6
 800523a:	fb03 ca19 	mls	sl, r3, r9, ip
 800523e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005242:	2f09      	cmp	r7, #9
 8005244:	d818      	bhi.n	8005278 <_strtol_l.isra.0+0xac>
 8005246:	463c      	mov	r4, r7
 8005248:	42a3      	cmp	r3, r4
 800524a:	dd24      	ble.n	8005296 <_strtol_l.isra.0+0xca>
 800524c:	2e00      	cmp	r6, #0
 800524e:	db1f      	blt.n	8005290 <_strtol_l.isra.0+0xc4>
 8005250:	45a9      	cmp	r9, r5
 8005252:	d31d      	bcc.n	8005290 <_strtol_l.isra.0+0xc4>
 8005254:	d101      	bne.n	800525a <_strtol_l.isra.0+0x8e>
 8005256:	45a2      	cmp	sl, r4
 8005258:	db1a      	blt.n	8005290 <_strtol_l.isra.0+0xc4>
 800525a:	fb05 4503 	mla	r5, r5, r3, r4
 800525e:	2601      	movs	r6, #1
 8005260:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005264:	e7eb      	b.n	800523e <_strtol_l.isra.0+0x72>
 8005266:	2c2b      	cmp	r4, #43	; 0x2b
 8005268:	bf08      	it	eq
 800526a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800526e:	46a8      	mov	r8, r5
 8005270:	bf08      	it	eq
 8005272:	f106 0e02 	addeq.w	lr, r6, #2
 8005276:	e7c7      	b.n	8005208 <_strtol_l.isra.0+0x3c>
 8005278:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800527c:	2f19      	cmp	r7, #25
 800527e:	d801      	bhi.n	8005284 <_strtol_l.isra.0+0xb8>
 8005280:	3c37      	subs	r4, #55	; 0x37
 8005282:	e7e1      	b.n	8005248 <_strtol_l.isra.0+0x7c>
 8005284:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005288:	2f19      	cmp	r7, #25
 800528a:	d804      	bhi.n	8005296 <_strtol_l.isra.0+0xca>
 800528c:	3c57      	subs	r4, #87	; 0x57
 800528e:	e7db      	b.n	8005248 <_strtol_l.isra.0+0x7c>
 8005290:	f04f 36ff 	mov.w	r6, #4294967295
 8005294:	e7e4      	b.n	8005260 <_strtol_l.isra.0+0x94>
 8005296:	2e00      	cmp	r6, #0
 8005298:	da05      	bge.n	80052a6 <_strtol_l.isra.0+0xda>
 800529a:	2322      	movs	r3, #34	; 0x22
 800529c:	6003      	str	r3, [r0, #0]
 800529e:	4665      	mov	r5, ip
 80052a0:	b942      	cbnz	r2, 80052b4 <_strtol_l.isra.0+0xe8>
 80052a2:	4628      	mov	r0, r5
 80052a4:	e79d      	b.n	80051e2 <_strtol_l.isra.0+0x16>
 80052a6:	f1b8 0f00 	cmp.w	r8, #0
 80052aa:	d000      	beq.n	80052ae <_strtol_l.isra.0+0xe2>
 80052ac:	426d      	negs	r5, r5
 80052ae:	2a00      	cmp	r2, #0
 80052b0:	d0f7      	beq.n	80052a2 <_strtol_l.isra.0+0xd6>
 80052b2:	b10e      	cbz	r6, 80052b8 <_strtol_l.isra.0+0xec>
 80052b4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80052b8:	6011      	str	r1, [r2, #0]
 80052ba:	e7f2      	b.n	80052a2 <_strtol_l.isra.0+0xd6>
 80052bc:	2430      	movs	r4, #48	; 0x30
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1b3      	bne.n	800522a <_strtol_l.isra.0+0x5e>
 80052c2:	2308      	movs	r3, #8
 80052c4:	e7b1      	b.n	800522a <_strtol_l.isra.0+0x5e>
 80052c6:	2c30      	cmp	r4, #48	; 0x30
 80052c8:	d0a4      	beq.n	8005214 <_strtol_l.isra.0+0x48>
 80052ca:	230a      	movs	r3, #10
 80052cc:	e7ad      	b.n	800522a <_strtol_l.isra.0+0x5e>
 80052ce:	bf00      	nop
 80052d0:	08005b5d 	.word	0x08005b5d

080052d4 <strtol>:
 80052d4:	4613      	mov	r3, r2
 80052d6:	460a      	mov	r2, r1
 80052d8:	4601      	mov	r1, r0
 80052da:	4802      	ldr	r0, [pc, #8]	; (80052e4 <strtol+0x10>)
 80052dc:	6800      	ldr	r0, [r0, #0]
 80052de:	f7ff bf75 	b.w	80051cc <_strtol_l.isra.0>
 80052e2:	bf00      	nop
 80052e4:	20000010 	.word	0x20000010

080052e8 <__ssputs_r>:
 80052e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052ec:	688e      	ldr	r6, [r1, #8]
 80052ee:	429e      	cmp	r6, r3
 80052f0:	4682      	mov	sl, r0
 80052f2:	460c      	mov	r4, r1
 80052f4:	4690      	mov	r8, r2
 80052f6:	461f      	mov	r7, r3
 80052f8:	d838      	bhi.n	800536c <__ssputs_r+0x84>
 80052fa:	898a      	ldrh	r2, [r1, #12]
 80052fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005300:	d032      	beq.n	8005368 <__ssputs_r+0x80>
 8005302:	6825      	ldr	r5, [r4, #0]
 8005304:	6909      	ldr	r1, [r1, #16]
 8005306:	eba5 0901 	sub.w	r9, r5, r1
 800530a:	6965      	ldr	r5, [r4, #20]
 800530c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005310:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005314:	3301      	adds	r3, #1
 8005316:	444b      	add	r3, r9
 8005318:	106d      	asrs	r5, r5, #1
 800531a:	429d      	cmp	r5, r3
 800531c:	bf38      	it	cc
 800531e:	461d      	movcc	r5, r3
 8005320:	0553      	lsls	r3, r2, #21
 8005322:	d531      	bpl.n	8005388 <__ssputs_r+0xa0>
 8005324:	4629      	mov	r1, r5
 8005326:	f000 fb47 	bl	80059b8 <_malloc_r>
 800532a:	4606      	mov	r6, r0
 800532c:	b950      	cbnz	r0, 8005344 <__ssputs_r+0x5c>
 800532e:	230c      	movs	r3, #12
 8005330:	f8ca 3000 	str.w	r3, [sl]
 8005334:	89a3      	ldrh	r3, [r4, #12]
 8005336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800533a:	81a3      	strh	r3, [r4, #12]
 800533c:	f04f 30ff 	mov.w	r0, #4294967295
 8005340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005344:	6921      	ldr	r1, [r4, #16]
 8005346:	464a      	mov	r2, r9
 8005348:	f000 fabe 	bl	80058c8 <memcpy>
 800534c:	89a3      	ldrh	r3, [r4, #12]
 800534e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005356:	81a3      	strh	r3, [r4, #12]
 8005358:	6126      	str	r6, [r4, #16]
 800535a:	6165      	str	r5, [r4, #20]
 800535c:	444e      	add	r6, r9
 800535e:	eba5 0509 	sub.w	r5, r5, r9
 8005362:	6026      	str	r6, [r4, #0]
 8005364:	60a5      	str	r5, [r4, #8]
 8005366:	463e      	mov	r6, r7
 8005368:	42be      	cmp	r6, r7
 800536a:	d900      	bls.n	800536e <__ssputs_r+0x86>
 800536c:	463e      	mov	r6, r7
 800536e:	4632      	mov	r2, r6
 8005370:	6820      	ldr	r0, [r4, #0]
 8005372:	4641      	mov	r1, r8
 8005374:	f000 fab6 	bl	80058e4 <memmove>
 8005378:	68a3      	ldr	r3, [r4, #8]
 800537a:	6822      	ldr	r2, [r4, #0]
 800537c:	1b9b      	subs	r3, r3, r6
 800537e:	4432      	add	r2, r6
 8005380:	60a3      	str	r3, [r4, #8]
 8005382:	6022      	str	r2, [r4, #0]
 8005384:	2000      	movs	r0, #0
 8005386:	e7db      	b.n	8005340 <__ssputs_r+0x58>
 8005388:	462a      	mov	r2, r5
 800538a:	f000 fb6f 	bl	8005a6c <_realloc_r>
 800538e:	4606      	mov	r6, r0
 8005390:	2800      	cmp	r0, #0
 8005392:	d1e1      	bne.n	8005358 <__ssputs_r+0x70>
 8005394:	6921      	ldr	r1, [r4, #16]
 8005396:	4650      	mov	r0, sl
 8005398:	f000 fabe 	bl	8005918 <_free_r>
 800539c:	e7c7      	b.n	800532e <__ssputs_r+0x46>
	...

080053a0 <_svfiprintf_r>:
 80053a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a4:	4698      	mov	r8, r3
 80053a6:	898b      	ldrh	r3, [r1, #12]
 80053a8:	061b      	lsls	r3, r3, #24
 80053aa:	b09d      	sub	sp, #116	; 0x74
 80053ac:	4607      	mov	r7, r0
 80053ae:	460d      	mov	r5, r1
 80053b0:	4614      	mov	r4, r2
 80053b2:	d50e      	bpl.n	80053d2 <_svfiprintf_r+0x32>
 80053b4:	690b      	ldr	r3, [r1, #16]
 80053b6:	b963      	cbnz	r3, 80053d2 <_svfiprintf_r+0x32>
 80053b8:	2140      	movs	r1, #64	; 0x40
 80053ba:	f000 fafd 	bl	80059b8 <_malloc_r>
 80053be:	6028      	str	r0, [r5, #0]
 80053c0:	6128      	str	r0, [r5, #16]
 80053c2:	b920      	cbnz	r0, 80053ce <_svfiprintf_r+0x2e>
 80053c4:	230c      	movs	r3, #12
 80053c6:	603b      	str	r3, [r7, #0]
 80053c8:	f04f 30ff 	mov.w	r0, #4294967295
 80053cc:	e0d1      	b.n	8005572 <_svfiprintf_r+0x1d2>
 80053ce:	2340      	movs	r3, #64	; 0x40
 80053d0:	616b      	str	r3, [r5, #20]
 80053d2:	2300      	movs	r3, #0
 80053d4:	9309      	str	r3, [sp, #36]	; 0x24
 80053d6:	2320      	movs	r3, #32
 80053d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80053dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80053e0:	2330      	movs	r3, #48	; 0x30
 80053e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800558c <_svfiprintf_r+0x1ec>
 80053e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053ea:	f04f 0901 	mov.w	r9, #1
 80053ee:	4623      	mov	r3, r4
 80053f0:	469a      	mov	sl, r3
 80053f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053f6:	b10a      	cbz	r2, 80053fc <_svfiprintf_r+0x5c>
 80053f8:	2a25      	cmp	r2, #37	; 0x25
 80053fa:	d1f9      	bne.n	80053f0 <_svfiprintf_r+0x50>
 80053fc:	ebba 0b04 	subs.w	fp, sl, r4
 8005400:	d00b      	beq.n	800541a <_svfiprintf_r+0x7a>
 8005402:	465b      	mov	r3, fp
 8005404:	4622      	mov	r2, r4
 8005406:	4629      	mov	r1, r5
 8005408:	4638      	mov	r0, r7
 800540a:	f7ff ff6d 	bl	80052e8 <__ssputs_r>
 800540e:	3001      	adds	r0, #1
 8005410:	f000 80aa 	beq.w	8005568 <_svfiprintf_r+0x1c8>
 8005414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005416:	445a      	add	r2, fp
 8005418:	9209      	str	r2, [sp, #36]	; 0x24
 800541a:	f89a 3000 	ldrb.w	r3, [sl]
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 80a2 	beq.w	8005568 <_svfiprintf_r+0x1c8>
 8005424:	2300      	movs	r3, #0
 8005426:	f04f 32ff 	mov.w	r2, #4294967295
 800542a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800542e:	f10a 0a01 	add.w	sl, sl, #1
 8005432:	9304      	str	r3, [sp, #16]
 8005434:	9307      	str	r3, [sp, #28]
 8005436:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800543a:	931a      	str	r3, [sp, #104]	; 0x68
 800543c:	4654      	mov	r4, sl
 800543e:	2205      	movs	r2, #5
 8005440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005444:	4851      	ldr	r0, [pc, #324]	; (800558c <_svfiprintf_r+0x1ec>)
 8005446:	f7fa fecb 	bl	80001e0 <memchr>
 800544a:	9a04      	ldr	r2, [sp, #16]
 800544c:	b9d8      	cbnz	r0, 8005486 <_svfiprintf_r+0xe6>
 800544e:	06d0      	lsls	r0, r2, #27
 8005450:	bf44      	itt	mi
 8005452:	2320      	movmi	r3, #32
 8005454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005458:	0711      	lsls	r1, r2, #28
 800545a:	bf44      	itt	mi
 800545c:	232b      	movmi	r3, #43	; 0x2b
 800545e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005462:	f89a 3000 	ldrb.w	r3, [sl]
 8005466:	2b2a      	cmp	r3, #42	; 0x2a
 8005468:	d015      	beq.n	8005496 <_svfiprintf_r+0xf6>
 800546a:	9a07      	ldr	r2, [sp, #28]
 800546c:	4654      	mov	r4, sl
 800546e:	2000      	movs	r0, #0
 8005470:	f04f 0c0a 	mov.w	ip, #10
 8005474:	4621      	mov	r1, r4
 8005476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800547a:	3b30      	subs	r3, #48	; 0x30
 800547c:	2b09      	cmp	r3, #9
 800547e:	d94e      	bls.n	800551e <_svfiprintf_r+0x17e>
 8005480:	b1b0      	cbz	r0, 80054b0 <_svfiprintf_r+0x110>
 8005482:	9207      	str	r2, [sp, #28]
 8005484:	e014      	b.n	80054b0 <_svfiprintf_r+0x110>
 8005486:	eba0 0308 	sub.w	r3, r0, r8
 800548a:	fa09 f303 	lsl.w	r3, r9, r3
 800548e:	4313      	orrs	r3, r2
 8005490:	9304      	str	r3, [sp, #16]
 8005492:	46a2      	mov	sl, r4
 8005494:	e7d2      	b.n	800543c <_svfiprintf_r+0x9c>
 8005496:	9b03      	ldr	r3, [sp, #12]
 8005498:	1d19      	adds	r1, r3, #4
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	9103      	str	r1, [sp, #12]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	bfbb      	ittet	lt
 80054a2:	425b      	neglt	r3, r3
 80054a4:	f042 0202 	orrlt.w	r2, r2, #2
 80054a8:	9307      	strge	r3, [sp, #28]
 80054aa:	9307      	strlt	r3, [sp, #28]
 80054ac:	bfb8      	it	lt
 80054ae:	9204      	strlt	r2, [sp, #16]
 80054b0:	7823      	ldrb	r3, [r4, #0]
 80054b2:	2b2e      	cmp	r3, #46	; 0x2e
 80054b4:	d10c      	bne.n	80054d0 <_svfiprintf_r+0x130>
 80054b6:	7863      	ldrb	r3, [r4, #1]
 80054b8:	2b2a      	cmp	r3, #42	; 0x2a
 80054ba:	d135      	bne.n	8005528 <_svfiprintf_r+0x188>
 80054bc:	9b03      	ldr	r3, [sp, #12]
 80054be:	1d1a      	adds	r2, r3, #4
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	9203      	str	r2, [sp, #12]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bfb8      	it	lt
 80054c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80054cc:	3402      	adds	r4, #2
 80054ce:	9305      	str	r3, [sp, #20]
 80054d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800559c <_svfiprintf_r+0x1fc>
 80054d4:	7821      	ldrb	r1, [r4, #0]
 80054d6:	2203      	movs	r2, #3
 80054d8:	4650      	mov	r0, sl
 80054da:	f7fa fe81 	bl	80001e0 <memchr>
 80054de:	b140      	cbz	r0, 80054f2 <_svfiprintf_r+0x152>
 80054e0:	2340      	movs	r3, #64	; 0x40
 80054e2:	eba0 000a 	sub.w	r0, r0, sl
 80054e6:	fa03 f000 	lsl.w	r0, r3, r0
 80054ea:	9b04      	ldr	r3, [sp, #16]
 80054ec:	4303      	orrs	r3, r0
 80054ee:	3401      	adds	r4, #1
 80054f0:	9304      	str	r3, [sp, #16]
 80054f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054f6:	4826      	ldr	r0, [pc, #152]	; (8005590 <_svfiprintf_r+0x1f0>)
 80054f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054fc:	2206      	movs	r2, #6
 80054fe:	f7fa fe6f 	bl	80001e0 <memchr>
 8005502:	2800      	cmp	r0, #0
 8005504:	d038      	beq.n	8005578 <_svfiprintf_r+0x1d8>
 8005506:	4b23      	ldr	r3, [pc, #140]	; (8005594 <_svfiprintf_r+0x1f4>)
 8005508:	bb1b      	cbnz	r3, 8005552 <_svfiprintf_r+0x1b2>
 800550a:	9b03      	ldr	r3, [sp, #12]
 800550c:	3307      	adds	r3, #7
 800550e:	f023 0307 	bic.w	r3, r3, #7
 8005512:	3308      	adds	r3, #8
 8005514:	9303      	str	r3, [sp, #12]
 8005516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005518:	4433      	add	r3, r6
 800551a:	9309      	str	r3, [sp, #36]	; 0x24
 800551c:	e767      	b.n	80053ee <_svfiprintf_r+0x4e>
 800551e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005522:	460c      	mov	r4, r1
 8005524:	2001      	movs	r0, #1
 8005526:	e7a5      	b.n	8005474 <_svfiprintf_r+0xd4>
 8005528:	2300      	movs	r3, #0
 800552a:	3401      	adds	r4, #1
 800552c:	9305      	str	r3, [sp, #20]
 800552e:	4619      	mov	r1, r3
 8005530:	f04f 0c0a 	mov.w	ip, #10
 8005534:	4620      	mov	r0, r4
 8005536:	f810 2b01 	ldrb.w	r2, [r0], #1
 800553a:	3a30      	subs	r2, #48	; 0x30
 800553c:	2a09      	cmp	r2, #9
 800553e:	d903      	bls.n	8005548 <_svfiprintf_r+0x1a8>
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0c5      	beq.n	80054d0 <_svfiprintf_r+0x130>
 8005544:	9105      	str	r1, [sp, #20]
 8005546:	e7c3      	b.n	80054d0 <_svfiprintf_r+0x130>
 8005548:	fb0c 2101 	mla	r1, ip, r1, r2
 800554c:	4604      	mov	r4, r0
 800554e:	2301      	movs	r3, #1
 8005550:	e7f0      	b.n	8005534 <_svfiprintf_r+0x194>
 8005552:	ab03      	add	r3, sp, #12
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	462a      	mov	r2, r5
 8005558:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <_svfiprintf_r+0x1f8>)
 800555a:	a904      	add	r1, sp, #16
 800555c:	4638      	mov	r0, r7
 800555e:	f3af 8000 	nop.w
 8005562:	1c42      	adds	r2, r0, #1
 8005564:	4606      	mov	r6, r0
 8005566:	d1d6      	bne.n	8005516 <_svfiprintf_r+0x176>
 8005568:	89ab      	ldrh	r3, [r5, #12]
 800556a:	065b      	lsls	r3, r3, #25
 800556c:	f53f af2c 	bmi.w	80053c8 <_svfiprintf_r+0x28>
 8005570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005572:	b01d      	add	sp, #116	; 0x74
 8005574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005578:	ab03      	add	r3, sp, #12
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	462a      	mov	r2, r5
 800557e:	4b06      	ldr	r3, [pc, #24]	; (8005598 <_svfiprintf_r+0x1f8>)
 8005580:	a904      	add	r1, sp, #16
 8005582:	4638      	mov	r0, r7
 8005584:	f000 f87a 	bl	800567c <_printf_i>
 8005588:	e7eb      	b.n	8005562 <_svfiprintf_r+0x1c2>
 800558a:	bf00      	nop
 800558c:	08005c5d 	.word	0x08005c5d
 8005590:	08005c67 	.word	0x08005c67
 8005594:	00000000 	.word	0x00000000
 8005598:	080052e9 	.word	0x080052e9
 800559c:	08005c63 	.word	0x08005c63

080055a0 <_printf_common>:
 80055a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a4:	4616      	mov	r6, r2
 80055a6:	4699      	mov	r9, r3
 80055a8:	688a      	ldr	r2, [r1, #8]
 80055aa:	690b      	ldr	r3, [r1, #16]
 80055ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055b0:	4293      	cmp	r3, r2
 80055b2:	bfb8      	it	lt
 80055b4:	4613      	movlt	r3, r2
 80055b6:	6033      	str	r3, [r6, #0]
 80055b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055bc:	4607      	mov	r7, r0
 80055be:	460c      	mov	r4, r1
 80055c0:	b10a      	cbz	r2, 80055c6 <_printf_common+0x26>
 80055c2:	3301      	adds	r3, #1
 80055c4:	6033      	str	r3, [r6, #0]
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	0699      	lsls	r1, r3, #26
 80055ca:	bf42      	ittt	mi
 80055cc:	6833      	ldrmi	r3, [r6, #0]
 80055ce:	3302      	addmi	r3, #2
 80055d0:	6033      	strmi	r3, [r6, #0]
 80055d2:	6825      	ldr	r5, [r4, #0]
 80055d4:	f015 0506 	ands.w	r5, r5, #6
 80055d8:	d106      	bne.n	80055e8 <_printf_common+0x48>
 80055da:	f104 0a19 	add.w	sl, r4, #25
 80055de:	68e3      	ldr	r3, [r4, #12]
 80055e0:	6832      	ldr	r2, [r6, #0]
 80055e2:	1a9b      	subs	r3, r3, r2
 80055e4:	42ab      	cmp	r3, r5
 80055e6:	dc26      	bgt.n	8005636 <_printf_common+0x96>
 80055e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055ec:	1e13      	subs	r3, r2, #0
 80055ee:	6822      	ldr	r2, [r4, #0]
 80055f0:	bf18      	it	ne
 80055f2:	2301      	movne	r3, #1
 80055f4:	0692      	lsls	r2, r2, #26
 80055f6:	d42b      	bmi.n	8005650 <_printf_common+0xb0>
 80055f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055fc:	4649      	mov	r1, r9
 80055fe:	4638      	mov	r0, r7
 8005600:	47c0      	blx	r8
 8005602:	3001      	adds	r0, #1
 8005604:	d01e      	beq.n	8005644 <_printf_common+0xa4>
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	68e5      	ldr	r5, [r4, #12]
 800560a:	6832      	ldr	r2, [r6, #0]
 800560c:	f003 0306 	and.w	r3, r3, #6
 8005610:	2b04      	cmp	r3, #4
 8005612:	bf08      	it	eq
 8005614:	1aad      	subeq	r5, r5, r2
 8005616:	68a3      	ldr	r3, [r4, #8]
 8005618:	6922      	ldr	r2, [r4, #16]
 800561a:	bf0c      	ite	eq
 800561c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005620:	2500      	movne	r5, #0
 8005622:	4293      	cmp	r3, r2
 8005624:	bfc4      	itt	gt
 8005626:	1a9b      	subgt	r3, r3, r2
 8005628:	18ed      	addgt	r5, r5, r3
 800562a:	2600      	movs	r6, #0
 800562c:	341a      	adds	r4, #26
 800562e:	42b5      	cmp	r5, r6
 8005630:	d11a      	bne.n	8005668 <_printf_common+0xc8>
 8005632:	2000      	movs	r0, #0
 8005634:	e008      	b.n	8005648 <_printf_common+0xa8>
 8005636:	2301      	movs	r3, #1
 8005638:	4652      	mov	r2, sl
 800563a:	4649      	mov	r1, r9
 800563c:	4638      	mov	r0, r7
 800563e:	47c0      	blx	r8
 8005640:	3001      	adds	r0, #1
 8005642:	d103      	bne.n	800564c <_printf_common+0xac>
 8005644:	f04f 30ff 	mov.w	r0, #4294967295
 8005648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800564c:	3501      	adds	r5, #1
 800564e:	e7c6      	b.n	80055de <_printf_common+0x3e>
 8005650:	18e1      	adds	r1, r4, r3
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	2030      	movs	r0, #48	; 0x30
 8005656:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800565a:	4422      	add	r2, r4
 800565c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005660:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005664:	3302      	adds	r3, #2
 8005666:	e7c7      	b.n	80055f8 <_printf_common+0x58>
 8005668:	2301      	movs	r3, #1
 800566a:	4622      	mov	r2, r4
 800566c:	4649      	mov	r1, r9
 800566e:	4638      	mov	r0, r7
 8005670:	47c0      	blx	r8
 8005672:	3001      	adds	r0, #1
 8005674:	d0e6      	beq.n	8005644 <_printf_common+0xa4>
 8005676:	3601      	adds	r6, #1
 8005678:	e7d9      	b.n	800562e <_printf_common+0x8e>
	...

0800567c <_printf_i>:
 800567c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005680:	460c      	mov	r4, r1
 8005682:	4691      	mov	r9, r2
 8005684:	7e27      	ldrb	r7, [r4, #24]
 8005686:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005688:	2f78      	cmp	r7, #120	; 0x78
 800568a:	4680      	mov	r8, r0
 800568c:	469a      	mov	sl, r3
 800568e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005692:	d807      	bhi.n	80056a4 <_printf_i+0x28>
 8005694:	2f62      	cmp	r7, #98	; 0x62
 8005696:	d80a      	bhi.n	80056ae <_printf_i+0x32>
 8005698:	2f00      	cmp	r7, #0
 800569a:	f000 80d8 	beq.w	800584e <_printf_i+0x1d2>
 800569e:	2f58      	cmp	r7, #88	; 0x58
 80056a0:	f000 80a3 	beq.w	80057ea <_printf_i+0x16e>
 80056a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056ac:	e03a      	b.n	8005724 <_printf_i+0xa8>
 80056ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056b2:	2b15      	cmp	r3, #21
 80056b4:	d8f6      	bhi.n	80056a4 <_printf_i+0x28>
 80056b6:	a001      	add	r0, pc, #4	; (adr r0, 80056bc <_printf_i+0x40>)
 80056b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80056bc:	08005715 	.word	0x08005715
 80056c0:	08005729 	.word	0x08005729
 80056c4:	080056a5 	.word	0x080056a5
 80056c8:	080056a5 	.word	0x080056a5
 80056cc:	080056a5 	.word	0x080056a5
 80056d0:	080056a5 	.word	0x080056a5
 80056d4:	08005729 	.word	0x08005729
 80056d8:	080056a5 	.word	0x080056a5
 80056dc:	080056a5 	.word	0x080056a5
 80056e0:	080056a5 	.word	0x080056a5
 80056e4:	080056a5 	.word	0x080056a5
 80056e8:	08005835 	.word	0x08005835
 80056ec:	08005759 	.word	0x08005759
 80056f0:	08005817 	.word	0x08005817
 80056f4:	080056a5 	.word	0x080056a5
 80056f8:	080056a5 	.word	0x080056a5
 80056fc:	08005857 	.word	0x08005857
 8005700:	080056a5 	.word	0x080056a5
 8005704:	08005759 	.word	0x08005759
 8005708:	080056a5 	.word	0x080056a5
 800570c:	080056a5 	.word	0x080056a5
 8005710:	0800581f 	.word	0x0800581f
 8005714:	680b      	ldr	r3, [r1, #0]
 8005716:	1d1a      	adds	r2, r3, #4
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	600a      	str	r2, [r1, #0]
 800571c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005724:	2301      	movs	r3, #1
 8005726:	e0a3      	b.n	8005870 <_printf_i+0x1f4>
 8005728:	6825      	ldr	r5, [r4, #0]
 800572a:	6808      	ldr	r0, [r1, #0]
 800572c:	062e      	lsls	r6, r5, #24
 800572e:	f100 0304 	add.w	r3, r0, #4
 8005732:	d50a      	bpl.n	800574a <_printf_i+0xce>
 8005734:	6805      	ldr	r5, [r0, #0]
 8005736:	600b      	str	r3, [r1, #0]
 8005738:	2d00      	cmp	r5, #0
 800573a:	da03      	bge.n	8005744 <_printf_i+0xc8>
 800573c:	232d      	movs	r3, #45	; 0x2d
 800573e:	426d      	negs	r5, r5
 8005740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005744:	485e      	ldr	r0, [pc, #376]	; (80058c0 <_printf_i+0x244>)
 8005746:	230a      	movs	r3, #10
 8005748:	e019      	b.n	800577e <_printf_i+0x102>
 800574a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800574e:	6805      	ldr	r5, [r0, #0]
 8005750:	600b      	str	r3, [r1, #0]
 8005752:	bf18      	it	ne
 8005754:	b22d      	sxthne	r5, r5
 8005756:	e7ef      	b.n	8005738 <_printf_i+0xbc>
 8005758:	680b      	ldr	r3, [r1, #0]
 800575a:	6825      	ldr	r5, [r4, #0]
 800575c:	1d18      	adds	r0, r3, #4
 800575e:	6008      	str	r0, [r1, #0]
 8005760:	0628      	lsls	r0, r5, #24
 8005762:	d501      	bpl.n	8005768 <_printf_i+0xec>
 8005764:	681d      	ldr	r5, [r3, #0]
 8005766:	e002      	b.n	800576e <_printf_i+0xf2>
 8005768:	0669      	lsls	r1, r5, #25
 800576a:	d5fb      	bpl.n	8005764 <_printf_i+0xe8>
 800576c:	881d      	ldrh	r5, [r3, #0]
 800576e:	4854      	ldr	r0, [pc, #336]	; (80058c0 <_printf_i+0x244>)
 8005770:	2f6f      	cmp	r7, #111	; 0x6f
 8005772:	bf0c      	ite	eq
 8005774:	2308      	moveq	r3, #8
 8005776:	230a      	movne	r3, #10
 8005778:	2100      	movs	r1, #0
 800577a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800577e:	6866      	ldr	r6, [r4, #4]
 8005780:	60a6      	str	r6, [r4, #8]
 8005782:	2e00      	cmp	r6, #0
 8005784:	bfa2      	ittt	ge
 8005786:	6821      	ldrge	r1, [r4, #0]
 8005788:	f021 0104 	bicge.w	r1, r1, #4
 800578c:	6021      	strge	r1, [r4, #0]
 800578e:	b90d      	cbnz	r5, 8005794 <_printf_i+0x118>
 8005790:	2e00      	cmp	r6, #0
 8005792:	d04d      	beq.n	8005830 <_printf_i+0x1b4>
 8005794:	4616      	mov	r6, r2
 8005796:	fbb5 f1f3 	udiv	r1, r5, r3
 800579a:	fb03 5711 	mls	r7, r3, r1, r5
 800579e:	5dc7      	ldrb	r7, [r0, r7]
 80057a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057a4:	462f      	mov	r7, r5
 80057a6:	42bb      	cmp	r3, r7
 80057a8:	460d      	mov	r5, r1
 80057aa:	d9f4      	bls.n	8005796 <_printf_i+0x11a>
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d10b      	bne.n	80057c8 <_printf_i+0x14c>
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	07df      	lsls	r7, r3, #31
 80057b4:	d508      	bpl.n	80057c8 <_printf_i+0x14c>
 80057b6:	6923      	ldr	r3, [r4, #16]
 80057b8:	6861      	ldr	r1, [r4, #4]
 80057ba:	4299      	cmp	r1, r3
 80057bc:	bfde      	ittt	le
 80057be:	2330      	movle	r3, #48	; 0x30
 80057c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057c8:	1b92      	subs	r2, r2, r6
 80057ca:	6122      	str	r2, [r4, #16]
 80057cc:	f8cd a000 	str.w	sl, [sp]
 80057d0:	464b      	mov	r3, r9
 80057d2:	aa03      	add	r2, sp, #12
 80057d4:	4621      	mov	r1, r4
 80057d6:	4640      	mov	r0, r8
 80057d8:	f7ff fee2 	bl	80055a0 <_printf_common>
 80057dc:	3001      	adds	r0, #1
 80057de:	d14c      	bne.n	800587a <_printf_i+0x1fe>
 80057e0:	f04f 30ff 	mov.w	r0, #4294967295
 80057e4:	b004      	add	sp, #16
 80057e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ea:	4835      	ldr	r0, [pc, #212]	; (80058c0 <_printf_i+0x244>)
 80057ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	680e      	ldr	r6, [r1, #0]
 80057f4:	061f      	lsls	r7, r3, #24
 80057f6:	f856 5b04 	ldr.w	r5, [r6], #4
 80057fa:	600e      	str	r6, [r1, #0]
 80057fc:	d514      	bpl.n	8005828 <_printf_i+0x1ac>
 80057fe:	07d9      	lsls	r1, r3, #31
 8005800:	bf44      	itt	mi
 8005802:	f043 0320 	orrmi.w	r3, r3, #32
 8005806:	6023      	strmi	r3, [r4, #0]
 8005808:	b91d      	cbnz	r5, 8005812 <_printf_i+0x196>
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	f023 0320 	bic.w	r3, r3, #32
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	2310      	movs	r3, #16
 8005814:	e7b0      	b.n	8005778 <_printf_i+0xfc>
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	f043 0320 	orr.w	r3, r3, #32
 800581c:	6023      	str	r3, [r4, #0]
 800581e:	2378      	movs	r3, #120	; 0x78
 8005820:	4828      	ldr	r0, [pc, #160]	; (80058c4 <_printf_i+0x248>)
 8005822:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005826:	e7e3      	b.n	80057f0 <_printf_i+0x174>
 8005828:	065e      	lsls	r6, r3, #25
 800582a:	bf48      	it	mi
 800582c:	b2ad      	uxthmi	r5, r5
 800582e:	e7e6      	b.n	80057fe <_printf_i+0x182>
 8005830:	4616      	mov	r6, r2
 8005832:	e7bb      	b.n	80057ac <_printf_i+0x130>
 8005834:	680b      	ldr	r3, [r1, #0]
 8005836:	6826      	ldr	r6, [r4, #0]
 8005838:	6960      	ldr	r0, [r4, #20]
 800583a:	1d1d      	adds	r5, r3, #4
 800583c:	600d      	str	r5, [r1, #0]
 800583e:	0635      	lsls	r5, r6, #24
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	d501      	bpl.n	8005848 <_printf_i+0x1cc>
 8005844:	6018      	str	r0, [r3, #0]
 8005846:	e002      	b.n	800584e <_printf_i+0x1d2>
 8005848:	0671      	lsls	r1, r6, #25
 800584a:	d5fb      	bpl.n	8005844 <_printf_i+0x1c8>
 800584c:	8018      	strh	r0, [r3, #0]
 800584e:	2300      	movs	r3, #0
 8005850:	6123      	str	r3, [r4, #16]
 8005852:	4616      	mov	r6, r2
 8005854:	e7ba      	b.n	80057cc <_printf_i+0x150>
 8005856:	680b      	ldr	r3, [r1, #0]
 8005858:	1d1a      	adds	r2, r3, #4
 800585a:	600a      	str	r2, [r1, #0]
 800585c:	681e      	ldr	r6, [r3, #0]
 800585e:	6862      	ldr	r2, [r4, #4]
 8005860:	2100      	movs	r1, #0
 8005862:	4630      	mov	r0, r6
 8005864:	f7fa fcbc 	bl	80001e0 <memchr>
 8005868:	b108      	cbz	r0, 800586e <_printf_i+0x1f2>
 800586a:	1b80      	subs	r0, r0, r6
 800586c:	6060      	str	r0, [r4, #4]
 800586e:	6863      	ldr	r3, [r4, #4]
 8005870:	6123      	str	r3, [r4, #16]
 8005872:	2300      	movs	r3, #0
 8005874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005878:	e7a8      	b.n	80057cc <_printf_i+0x150>
 800587a:	6923      	ldr	r3, [r4, #16]
 800587c:	4632      	mov	r2, r6
 800587e:	4649      	mov	r1, r9
 8005880:	4640      	mov	r0, r8
 8005882:	47d0      	blx	sl
 8005884:	3001      	adds	r0, #1
 8005886:	d0ab      	beq.n	80057e0 <_printf_i+0x164>
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	079b      	lsls	r3, r3, #30
 800588c:	d413      	bmi.n	80058b6 <_printf_i+0x23a>
 800588e:	68e0      	ldr	r0, [r4, #12]
 8005890:	9b03      	ldr	r3, [sp, #12]
 8005892:	4298      	cmp	r0, r3
 8005894:	bfb8      	it	lt
 8005896:	4618      	movlt	r0, r3
 8005898:	e7a4      	b.n	80057e4 <_printf_i+0x168>
 800589a:	2301      	movs	r3, #1
 800589c:	4632      	mov	r2, r6
 800589e:	4649      	mov	r1, r9
 80058a0:	4640      	mov	r0, r8
 80058a2:	47d0      	blx	sl
 80058a4:	3001      	adds	r0, #1
 80058a6:	d09b      	beq.n	80057e0 <_printf_i+0x164>
 80058a8:	3501      	adds	r5, #1
 80058aa:	68e3      	ldr	r3, [r4, #12]
 80058ac:	9903      	ldr	r1, [sp, #12]
 80058ae:	1a5b      	subs	r3, r3, r1
 80058b0:	42ab      	cmp	r3, r5
 80058b2:	dcf2      	bgt.n	800589a <_printf_i+0x21e>
 80058b4:	e7eb      	b.n	800588e <_printf_i+0x212>
 80058b6:	2500      	movs	r5, #0
 80058b8:	f104 0619 	add.w	r6, r4, #25
 80058bc:	e7f5      	b.n	80058aa <_printf_i+0x22e>
 80058be:	bf00      	nop
 80058c0:	08005c6e 	.word	0x08005c6e
 80058c4:	08005c7f 	.word	0x08005c7f

080058c8 <memcpy>:
 80058c8:	440a      	add	r2, r1
 80058ca:	4291      	cmp	r1, r2
 80058cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80058d0:	d100      	bne.n	80058d4 <memcpy+0xc>
 80058d2:	4770      	bx	lr
 80058d4:	b510      	push	{r4, lr}
 80058d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058de:	4291      	cmp	r1, r2
 80058e0:	d1f9      	bne.n	80058d6 <memcpy+0xe>
 80058e2:	bd10      	pop	{r4, pc}

080058e4 <memmove>:
 80058e4:	4288      	cmp	r0, r1
 80058e6:	b510      	push	{r4, lr}
 80058e8:	eb01 0402 	add.w	r4, r1, r2
 80058ec:	d902      	bls.n	80058f4 <memmove+0x10>
 80058ee:	4284      	cmp	r4, r0
 80058f0:	4623      	mov	r3, r4
 80058f2:	d807      	bhi.n	8005904 <memmove+0x20>
 80058f4:	1e43      	subs	r3, r0, #1
 80058f6:	42a1      	cmp	r1, r4
 80058f8:	d008      	beq.n	800590c <memmove+0x28>
 80058fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005902:	e7f8      	b.n	80058f6 <memmove+0x12>
 8005904:	4402      	add	r2, r0
 8005906:	4601      	mov	r1, r0
 8005908:	428a      	cmp	r2, r1
 800590a:	d100      	bne.n	800590e <memmove+0x2a>
 800590c:	bd10      	pop	{r4, pc}
 800590e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005912:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005916:	e7f7      	b.n	8005908 <memmove+0x24>

08005918 <_free_r>:
 8005918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800591a:	2900      	cmp	r1, #0
 800591c:	d048      	beq.n	80059b0 <_free_r+0x98>
 800591e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005922:	9001      	str	r0, [sp, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	f1a1 0404 	sub.w	r4, r1, #4
 800592a:	bfb8      	it	lt
 800592c:	18e4      	addlt	r4, r4, r3
 800592e:	f000 f8d3 	bl	8005ad8 <__malloc_lock>
 8005932:	4a20      	ldr	r2, [pc, #128]	; (80059b4 <_free_r+0x9c>)
 8005934:	9801      	ldr	r0, [sp, #4]
 8005936:	6813      	ldr	r3, [r2, #0]
 8005938:	4615      	mov	r5, r2
 800593a:	b933      	cbnz	r3, 800594a <_free_r+0x32>
 800593c:	6063      	str	r3, [r4, #4]
 800593e:	6014      	str	r4, [r2, #0]
 8005940:	b003      	add	sp, #12
 8005942:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005946:	f000 b8cd 	b.w	8005ae4 <__malloc_unlock>
 800594a:	42a3      	cmp	r3, r4
 800594c:	d90b      	bls.n	8005966 <_free_r+0x4e>
 800594e:	6821      	ldr	r1, [r4, #0]
 8005950:	1862      	adds	r2, r4, r1
 8005952:	4293      	cmp	r3, r2
 8005954:	bf04      	itt	eq
 8005956:	681a      	ldreq	r2, [r3, #0]
 8005958:	685b      	ldreq	r3, [r3, #4]
 800595a:	6063      	str	r3, [r4, #4]
 800595c:	bf04      	itt	eq
 800595e:	1852      	addeq	r2, r2, r1
 8005960:	6022      	streq	r2, [r4, #0]
 8005962:	602c      	str	r4, [r5, #0]
 8005964:	e7ec      	b.n	8005940 <_free_r+0x28>
 8005966:	461a      	mov	r2, r3
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	b10b      	cbz	r3, 8005970 <_free_r+0x58>
 800596c:	42a3      	cmp	r3, r4
 800596e:	d9fa      	bls.n	8005966 <_free_r+0x4e>
 8005970:	6811      	ldr	r1, [r2, #0]
 8005972:	1855      	adds	r5, r2, r1
 8005974:	42a5      	cmp	r5, r4
 8005976:	d10b      	bne.n	8005990 <_free_r+0x78>
 8005978:	6824      	ldr	r4, [r4, #0]
 800597a:	4421      	add	r1, r4
 800597c:	1854      	adds	r4, r2, r1
 800597e:	42a3      	cmp	r3, r4
 8005980:	6011      	str	r1, [r2, #0]
 8005982:	d1dd      	bne.n	8005940 <_free_r+0x28>
 8005984:	681c      	ldr	r4, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	6053      	str	r3, [r2, #4]
 800598a:	4421      	add	r1, r4
 800598c:	6011      	str	r1, [r2, #0]
 800598e:	e7d7      	b.n	8005940 <_free_r+0x28>
 8005990:	d902      	bls.n	8005998 <_free_r+0x80>
 8005992:	230c      	movs	r3, #12
 8005994:	6003      	str	r3, [r0, #0]
 8005996:	e7d3      	b.n	8005940 <_free_r+0x28>
 8005998:	6825      	ldr	r5, [r4, #0]
 800599a:	1961      	adds	r1, r4, r5
 800599c:	428b      	cmp	r3, r1
 800599e:	bf04      	itt	eq
 80059a0:	6819      	ldreq	r1, [r3, #0]
 80059a2:	685b      	ldreq	r3, [r3, #4]
 80059a4:	6063      	str	r3, [r4, #4]
 80059a6:	bf04      	itt	eq
 80059a8:	1949      	addeq	r1, r1, r5
 80059aa:	6021      	streq	r1, [r4, #0]
 80059ac:	6054      	str	r4, [r2, #4]
 80059ae:	e7c7      	b.n	8005940 <_free_r+0x28>
 80059b0:	b003      	add	sp, #12
 80059b2:	bd30      	pop	{r4, r5, pc}
 80059b4:	20000098 	.word	0x20000098

080059b8 <_malloc_r>:
 80059b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ba:	1ccd      	adds	r5, r1, #3
 80059bc:	f025 0503 	bic.w	r5, r5, #3
 80059c0:	3508      	adds	r5, #8
 80059c2:	2d0c      	cmp	r5, #12
 80059c4:	bf38      	it	cc
 80059c6:	250c      	movcc	r5, #12
 80059c8:	2d00      	cmp	r5, #0
 80059ca:	4606      	mov	r6, r0
 80059cc:	db01      	blt.n	80059d2 <_malloc_r+0x1a>
 80059ce:	42a9      	cmp	r1, r5
 80059d0:	d903      	bls.n	80059da <_malloc_r+0x22>
 80059d2:	230c      	movs	r3, #12
 80059d4:	6033      	str	r3, [r6, #0]
 80059d6:	2000      	movs	r0, #0
 80059d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059da:	f000 f87d 	bl	8005ad8 <__malloc_lock>
 80059de:	4921      	ldr	r1, [pc, #132]	; (8005a64 <_malloc_r+0xac>)
 80059e0:	680a      	ldr	r2, [r1, #0]
 80059e2:	4614      	mov	r4, r2
 80059e4:	b99c      	cbnz	r4, 8005a0e <_malloc_r+0x56>
 80059e6:	4f20      	ldr	r7, [pc, #128]	; (8005a68 <_malloc_r+0xb0>)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	b923      	cbnz	r3, 80059f6 <_malloc_r+0x3e>
 80059ec:	4621      	mov	r1, r4
 80059ee:	4630      	mov	r0, r6
 80059f0:	f000 f862 	bl	8005ab8 <_sbrk_r>
 80059f4:	6038      	str	r0, [r7, #0]
 80059f6:	4629      	mov	r1, r5
 80059f8:	4630      	mov	r0, r6
 80059fa:	f000 f85d 	bl	8005ab8 <_sbrk_r>
 80059fe:	1c43      	adds	r3, r0, #1
 8005a00:	d123      	bne.n	8005a4a <_malloc_r+0x92>
 8005a02:	230c      	movs	r3, #12
 8005a04:	6033      	str	r3, [r6, #0]
 8005a06:	4630      	mov	r0, r6
 8005a08:	f000 f86c 	bl	8005ae4 <__malloc_unlock>
 8005a0c:	e7e3      	b.n	80059d6 <_malloc_r+0x1e>
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	1b5b      	subs	r3, r3, r5
 8005a12:	d417      	bmi.n	8005a44 <_malloc_r+0x8c>
 8005a14:	2b0b      	cmp	r3, #11
 8005a16:	d903      	bls.n	8005a20 <_malloc_r+0x68>
 8005a18:	6023      	str	r3, [r4, #0]
 8005a1a:	441c      	add	r4, r3
 8005a1c:	6025      	str	r5, [r4, #0]
 8005a1e:	e004      	b.n	8005a2a <_malloc_r+0x72>
 8005a20:	6863      	ldr	r3, [r4, #4]
 8005a22:	42a2      	cmp	r2, r4
 8005a24:	bf0c      	ite	eq
 8005a26:	600b      	streq	r3, [r1, #0]
 8005a28:	6053      	strne	r3, [r2, #4]
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	f000 f85a 	bl	8005ae4 <__malloc_unlock>
 8005a30:	f104 000b 	add.w	r0, r4, #11
 8005a34:	1d23      	adds	r3, r4, #4
 8005a36:	f020 0007 	bic.w	r0, r0, #7
 8005a3a:	1ac2      	subs	r2, r0, r3
 8005a3c:	d0cc      	beq.n	80059d8 <_malloc_r+0x20>
 8005a3e:	1a1b      	subs	r3, r3, r0
 8005a40:	50a3      	str	r3, [r4, r2]
 8005a42:	e7c9      	b.n	80059d8 <_malloc_r+0x20>
 8005a44:	4622      	mov	r2, r4
 8005a46:	6864      	ldr	r4, [r4, #4]
 8005a48:	e7cc      	b.n	80059e4 <_malloc_r+0x2c>
 8005a4a:	1cc4      	adds	r4, r0, #3
 8005a4c:	f024 0403 	bic.w	r4, r4, #3
 8005a50:	42a0      	cmp	r0, r4
 8005a52:	d0e3      	beq.n	8005a1c <_malloc_r+0x64>
 8005a54:	1a21      	subs	r1, r4, r0
 8005a56:	4630      	mov	r0, r6
 8005a58:	f000 f82e 	bl	8005ab8 <_sbrk_r>
 8005a5c:	3001      	adds	r0, #1
 8005a5e:	d1dd      	bne.n	8005a1c <_malloc_r+0x64>
 8005a60:	e7cf      	b.n	8005a02 <_malloc_r+0x4a>
 8005a62:	bf00      	nop
 8005a64:	20000098 	.word	0x20000098
 8005a68:	2000009c 	.word	0x2000009c

08005a6c <_realloc_r>:
 8005a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a6e:	4607      	mov	r7, r0
 8005a70:	4614      	mov	r4, r2
 8005a72:	460e      	mov	r6, r1
 8005a74:	b921      	cbnz	r1, 8005a80 <_realloc_r+0x14>
 8005a76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	f7ff bf9c 	b.w	80059b8 <_malloc_r>
 8005a80:	b922      	cbnz	r2, 8005a8c <_realloc_r+0x20>
 8005a82:	f7ff ff49 	bl	8005918 <_free_r>
 8005a86:	4625      	mov	r5, r4
 8005a88:	4628      	mov	r0, r5
 8005a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a8c:	f000 f830 	bl	8005af0 <_malloc_usable_size_r>
 8005a90:	42a0      	cmp	r0, r4
 8005a92:	d20f      	bcs.n	8005ab4 <_realloc_r+0x48>
 8005a94:	4621      	mov	r1, r4
 8005a96:	4638      	mov	r0, r7
 8005a98:	f7ff ff8e 	bl	80059b8 <_malloc_r>
 8005a9c:	4605      	mov	r5, r0
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d0f2      	beq.n	8005a88 <_realloc_r+0x1c>
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	4622      	mov	r2, r4
 8005aa6:	f7ff ff0f 	bl	80058c8 <memcpy>
 8005aaa:	4631      	mov	r1, r6
 8005aac:	4638      	mov	r0, r7
 8005aae:	f7ff ff33 	bl	8005918 <_free_r>
 8005ab2:	e7e9      	b.n	8005a88 <_realloc_r+0x1c>
 8005ab4:	4635      	mov	r5, r6
 8005ab6:	e7e7      	b.n	8005a88 <_realloc_r+0x1c>

08005ab8 <_sbrk_r>:
 8005ab8:	b538      	push	{r3, r4, r5, lr}
 8005aba:	4d06      	ldr	r5, [pc, #24]	; (8005ad4 <_sbrk_r+0x1c>)
 8005abc:	2300      	movs	r3, #0
 8005abe:	4604      	mov	r4, r0
 8005ac0:	4608      	mov	r0, r1
 8005ac2:	602b      	str	r3, [r5, #0]
 8005ac4:	f7fb f870 	bl	8000ba8 <_sbrk>
 8005ac8:	1c43      	adds	r3, r0, #1
 8005aca:	d102      	bne.n	8005ad2 <_sbrk_r+0x1a>
 8005acc:	682b      	ldr	r3, [r5, #0]
 8005ace:	b103      	cbz	r3, 8005ad2 <_sbrk_r+0x1a>
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	bd38      	pop	{r3, r4, r5, pc}
 8005ad4:	20000214 	.word	0x20000214

08005ad8 <__malloc_lock>:
 8005ad8:	4801      	ldr	r0, [pc, #4]	; (8005ae0 <__malloc_lock+0x8>)
 8005ada:	f000 b811 	b.w	8005b00 <__retarget_lock_acquire_recursive>
 8005ade:	bf00      	nop
 8005ae0:	2000021c 	.word	0x2000021c

08005ae4 <__malloc_unlock>:
 8005ae4:	4801      	ldr	r0, [pc, #4]	; (8005aec <__malloc_unlock+0x8>)
 8005ae6:	f000 b80c 	b.w	8005b02 <__retarget_lock_release_recursive>
 8005aea:	bf00      	nop
 8005aec:	2000021c 	.word	0x2000021c

08005af0 <_malloc_usable_size_r>:
 8005af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005af4:	1f18      	subs	r0, r3, #4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	bfbc      	itt	lt
 8005afa:	580b      	ldrlt	r3, [r1, r0]
 8005afc:	18c0      	addlt	r0, r0, r3
 8005afe:	4770      	bx	lr

08005b00 <__retarget_lock_acquire_recursive>:
 8005b00:	4770      	bx	lr

08005b02 <__retarget_lock_release_recursive>:
 8005b02:	4770      	bx	lr

08005b04 <_init>:
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	bf00      	nop
 8005b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0a:	bc08      	pop	{r3}
 8005b0c:	469e      	mov	lr, r3
 8005b0e:	4770      	bx	lr

08005b10 <_fini>:
 8005b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b12:	bf00      	nop
 8005b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b16:	bc08      	pop	{r3}
 8005b18:	469e      	mov	lr, r3
 8005b1a:	4770      	bx	lr
